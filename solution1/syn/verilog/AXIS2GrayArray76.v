// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AXIS2GrayArray76 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        axis_in_TDATA,
        axis_in_TVALID,
        axis_in_TREADY,
        axis_in_TUSER,
        axis_in_TLAST,
        hist_hthr_dout,
        hist_hthr_empty_n,
        hist_hthr_read,
        hist_lthr_dout,
        hist_lthr_empty_n,
        hist_lthr_read,
        hist_hthr_out_din,
        hist_hthr_out_full_n,
        hist_hthr_out_write,
        hist_lthr_out_din,
        hist_lthr_out_full_n,
        hist_lthr_out_write,
        fifo1_din,
        fifo1_full_n,
        fifo1_write
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_pp1_stage0 = 8'd16;
parameter    ap_ST_fsm_state9 = 8'd32;
parameter    ap_ST_fsm_state10 = 8'd64;
parameter    ap_ST_fsm_state11 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [23:0] axis_in_TDATA;
input   axis_in_TVALID;
output   axis_in_TREADY;
input  [0:0] axis_in_TUSER;
input  [0:0] axis_in_TLAST;
input  [7:0] hist_hthr_dout;
input   hist_hthr_empty_n;
output   hist_hthr_read;
input  [7:0] hist_lthr_dout;
input   hist_lthr_empty_n;
output   hist_lthr_read;
output  [7:0] hist_hthr_out_din;
input   hist_hthr_out_full_n;
output   hist_hthr_out_write;
output  [7:0] hist_lthr_out_din;
input   hist_lthr_out_full_n;
output   hist_lthr_out_write;
output  [7:0] fifo1_din;
input   fifo1_full_n;
output   fifo1_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg hist_hthr_read;
reg hist_lthr_read;
reg hist_hthr_out_write;
reg hist_lthr_out_write;
reg fifo1_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [23:0] axis_src_V_data_V_0_data_out;
wire    axis_src_V_data_V_0_vld_in;
wire    axis_src_V_data_V_0_vld_out;
wire    axis_src_V_data_V_0_ack_in;
reg    axis_src_V_data_V_0_ack_out;
reg   [23:0] axis_src_V_data_V_0_payload_A;
reg   [23:0] axis_src_V_data_V_0_payload_B;
reg    axis_src_V_data_V_0_sel_rd;
reg    axis_src_V_data_V_0_sel_wr;
wire    axis_src_V_data_V_0_sel;
wire    axis_src_V_data_V_0_load_A;
wire    axis_src_V_data_V_0_load_B;
reg   [1:0] axis_src_V_data_V_0_state;
wire    axis_src_V_data_V_0_state_cmp_full;
reg   [0:0] axis_src_V_user_V_0_data_out;
wire    axis_src_V_user_V_0_vld_in;
wire    axis_src_V_user_V_0_vld_out;
wire    axis_src_V_user_V_0_ack_in;
reg    axis_src_V_user_V_0_ack_out;
reg   [0:0] axis_src_V_user_V_0_payload_A;
reg   [0:0] axis_src_V_user_V_0_payload_B;
reg    axis_src_V_user_V_0_sel_rd;
reg    axis_src_V_user_V_0_sel_wr;
wire    axis_src_V_user_V_0_sel;
wire    axis_src_V_user_V_0_load_A;
wire    axis_src_V_user_V_0_load_B;
reg   [1:0] axis_src_V_user_V_0_state;
wire    axis_src_V_user_V_0_state_cmp_full;
reg   [0:0] axis_src_V_last_V_0_data_out;
wire    axis_src_V_last_V_0_vld_in;
wire    axis_src_V_last_V_0_vld_out;
wire    axis_src_V_last_V_0_ack_in;
reg    axis_src_V_last_V_0_ack_out;
reg   [0:0] axis_src_V_last_V_0_payload_A;
reg   [0:0] axis_src_V_last_V_0_payload_B;
reg    axis_src_V_last_V_0_sel_rd;
reg    axis_src_V_last_V_0_sel_wr;
wire    axis_src_V_last_V_0_sel;
wire    axis_src_V_last_V_0_load_A;
wire    axis_src_V_last_V_0_load_B;
reg   [1:0] axis_src_V_last_V_0_state;
wire    axis_src_V_last_V_0_state_cmp_full;
reg    axis_in_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage0;
wire   [0:0] tmp_72_i_i_i_fu_359_p2;
wire   [0:0] brmerge_i_i_i_fu_374_p2;
wire    ap_CS_fsm_state10;
wire   [0:0] ap_phi_mux_eol_2_i_i_i_phi_fu_321_p4;
reg    hist_hthr_blk_n;
reg    hist_lthr_blk_n;
reg    hist_hthr_out_blk_n;
reg    hist_lthr_out_blk_n;
reg    fifo1_blk_n;
reg    ap_enable_reg_pp1_iter3;
reg   [0:0] tmp_72_i_i_i_reg_497;
reg   [0:0] tmp_72_i_i_i_reg_497_pp1_iter2_reg;
reg   [0:0] eol_reg_224;
reg   [23:0] axis_reader_data_V_1_reg_235;
reg   [0:0] eol_i_i_i_reg_246;
reg   [9:0] xi_i_i_i_reg_258;
reg   [0:0] axis_reader_last_V_2_reg_269;
reg   [23:0] axis_reader_data_V_2_reg_282;
reg   [23:0] tmp_data_V_reg_468;
reg   [0:0] tmp_last_V_reg_476;
wire   [0:0] exitcond_i_i_i_fu_347_p2;
wire    ap_CS_fsm_state4;
wire   [9:0] yi_fu_353_p2;
reg   [9:0] yi_reg_492;
reg    ap_predicate_op122_read_state5;
reg    ap_block_state5_pp1_stage0_iter0;
wire    ap_block_state6_pp1_stage0_iter1;
wire    ap_block_state7_pp1_stage0_iter2;
reg    ap_block_state8_pp1_stage0_iter3;
reg    ap_block_pp1_stage0_11001;
reg   [0:0] tmp_72_i_i_i_reg_497_pp1_iter1_reg;
wire   [9:0] xi_fu_365_p2;
wire   [7:0] ret_V_fu_380_p1;
reg   [7:0] ret_V_reg_510;
reg   [7:0] p_1_cast_i_i_i_reg_515;
reg   [7:0] p_1_cast_i_i_i_reg_515_pp1_iter1_reg;
reg   [7:0] tmp_19_i_reg_520;
reg   [7:0] tmp_19_i_reg_520_pp1_iter1_reg;
wire   [22:0] p_i_i_i_fu_444_p2;
reg   [22:0] p_i_i_i_reg_525;
reg   [0:0] tmp_reg_530;
reg   [7:0] tmp_77_i_i_i_reg_535;
reg    ap_block_state10;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] axis_reader_last_V1_s_reg_193;
wire    ap_CS_fsm_state3;
reg   [0:0] axis_reader_last_V_3_reg_294;
wire    ap_CS_fsm_state11;
reg   [23:0] axis_reader_data_V1_s_reg_203;
reg   [23:0] axis_reader_data_V_3_reg_306;
reg   [9:0] yi_i_i_i_reg_213;
reg   [0:0] ap_phi_mux_eol_phi_fu_227_p4;
reg   [23:0] ap_phi_mux_axis_reader_data_V_1_phi_fu_238_p4;
reg   [0:0] ap_phi_mux_eol_i_i_i_phi_fu_250_p4;
wire   [0:0] ap_phi_reg_pp1_iter0_axis_reader_last_V_2_reg_269;
reg   [23:0] ap_phi_mux_axis_reader_data_V_2_phi_fu_286_p4;
wire   [23:0] ap_phi_reg_pp1_iter0_axis_reader_data_V_2_reg_282;
wire    ap_CS_fsm_state9;
reg   [0:0] eol_2_i_i_i_reg_318;
reg    ap_block_state1;
reg    ap_block_pp1_stage0_01001;
reg   [0:0] sof_1_i_i_i_fu_144;
wire   [22:0] grp_fu_460_p3;
wire   [24:0] grp_fu_450_p3;
wire   [14:0] p_i_i_i_fu_444_p0;
wire   [7:0] p_i_i_i_fu_444_p1;
wire   [16:0] grp_fu_450_p0;
wire   [7:0] grp_fu_450_p1;
wire   [22:0] grp_fu_450_p2;
wire   [15:0] grp_fu_460_p0;
wire   [7:0] grp_fu_460_p1;
wire   [0:0] tmp_user_V_fu_338_p1;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [24:0] grp_fu_450_p10;
wire   [24:0] grp_fu_450_p20;
wire   [22:0] grp_fu_460_p10;
wire   [22:0] p_i_i_i_fu_444_p10;
reg    ap_condition_461;
reg    ap_condition_343;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
#0 axis_src_V_data_V_0_sel_rd = 1'b0;
#0 axis_src_V_data_V_0_sel_wr = 1'b0;
#0 axis_src_V_data_V_0_state = 2'd0;
#0 axis_src_V_user_V_0_sel_rd = 1'b0;
#0 axis_src_V_user_V_0_sel_wr = 1'b0;
#0 axis_src_V_user_V_0_state = 2'd0;
#0 axis_src_V_last_V_0_sel_rd = 1'b0;
#0 axis_src_V_last_V_0_sel_wr = 1'b0;
#0 axis_src_V_last_V_0_state = 2'd0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

canny_edge_detectbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 23 ))
canny_edge_detectbkb_U5(
    .din0(p_i_i_i_fu_444_p0),
    .din1(p_i_i_i_fu_444_p1),
    .dout(p_i_i_i_fu_444_p2)
);

canny_edge_detectcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 23 ),
    .dout_WIDTH( 25 ))
canny_edge_detectcud_U6(
    .din0(grp_fu_450_p0),
    .din1(grp_fu_450_p1),
    .din2(grp_fu_450_p2),
    .dout(grp_fu_450_p3)
);

canny_edge_detectdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 23 ),
    .dout_WIDTH( 23 ))
canny_edge_detectdEe_U7(
    .din0(grp_fu_460_p0),
    .din1(grp_fu_460_p1),
    .din2(p_i_i_i_reg_525),
    .dout(grp_fu_460_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond_i_i_i_fu_347_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((exitcond_i_i_i_fu_347_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state5)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if (((exitcond_i_i_i_fu_347_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        axis_src_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((axis_src_V_data_V_0_ack_out == 1'b1) & (axis_src_V_data_V_0_vld_out == 1'b1))) begin
            axis_src_V_data_V_0_sel_rd <= ~axis_src_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        axis_src_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((axis_src_V_data_V_0_ack_in == 1'b1) & (axis_src_V_data_V_0_vld_in == 1'b1))) begin
            axis_src_V_data_V_0_sel_wr <= ~axis_src_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        axis_src_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((axis_src_V_data_V_0_state == 2'd2) & (axis_src_V_data_V_0_vld_in == 1'b0)) | ((axis_src_V_data_V_0_state == 2'd3) & (axis_src_V_data_V_0_vld_in == 1'b0) & (axis_src_V_data_V_0_ack_out == 1'b1)))) begin
            axis_src_V_data_V_0_state <= 2'd2;
        end else if ((((axis_src_V_data_V_0_state == 2'd1) & (axis_src_V_data_V_0_ack_out == 1'b0)) | ((axis_src_V_data_V_0_state == 2'd3) & (axis_src_V_data_V_0_ack_out == 1'b0) & (axis_src_V_data_V_0_vld_in == 1'b1)))) begin
            axis_src_V_data_V_0_state <= 2'd1;
        end else if (((~((axis_src_V_data_V_0_vld_in == 1'b0) & (axis_src_V_data_V_0_ack_out == 1'b1)) & ~((axis_src_V_data_V_0_ack_out == 1'b0) & (axis_src_V_data_V_0_vld_in == 1'b1)) & (axis_src_V_data_V_0_state == 2'd3)) | ((axis_src_V_data_V_0_state == 2'd1) & (axis_src_V_data_V_0_ack_out == 1'b1)) | ((axis_src_V_data_V_0_state == 2'd2) & (axis_src_V_data_V_0_vld_in == 1'b1)))) begin
            axis_src_V_data_V_0_state <= 2'd3;
        end else begin
            axis_src_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        axis_src_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((axis_src_V_last_V_0_ack_out == 1'b1) & (axis_src_V_last_V_0_vld_out == 1'b1))) begin
            axis_src_V_last_V_0_sel_rd <= ~axis_src_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        axis_src_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((axis_src_V_last_V_0_ack_in == 1'b1) & (axis_src_V_last_V_0_vld_in == 1'b1))) begin
            axis_src_V_last_V_0_sel_wr <= ~axis_src_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        axis_src_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((axis_src_V_last_V_0_state == 2'd2) & (axis_src_V_last_V_0_vld_in == 1'b0)) | ((axis_src_V_last_V_0_state == 2'd3) & (axis_src_V_last_V_0_vld_in == 1'b0) & (axis_src_V_last_V_0_ack_out == 1'b1)))) begin
            axis_src_V_last_V_0_state <= 2'd2;
        end else if ((((axis_src_V_last_V_0_state == 2'd1) & (axis_src_V_last_V_0_ack_out == 1'b0)) | ((axis_src_V_last_V_0_state == 2'd3) & (axis_src_V_last_V_0_ack_out == 1'b0) & (axis_src_V_last_V_0_vld_in == 1'b1)))) begin
            axis_src_V_last_V_0_state <= 2'd1;
        end else if (((~((axis_src_V_last_V_0_vld_in == 1'b0) & (axis_src_V_last_V_0_ack_out == 1'b1)) & ~((axis_src_V_last_V_0_ack_out == 1'b0) & (axis_src_V_last_V_0_vld_in == 1'b1)) & (axis_src_V_last_V_0_state == 2'd3)) | ((axis_src_V_last_V_0_state == 2'd1) & (axis_src_V_last_V_0_ack_out == 1'b1)) | ((axis_src_V_last_V_0_state == 2'd2) & (axis_src_V_last_V_0_vld_in == 1'b1)))) begin
            axis_src_V_last_V_0_state <= 2'd3;
        end else begin
            axis_src_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        axis_src_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((axis_src_V_user_V_0_ack_out == 1'b1) & (axis_src_V_user_V_0_vld_out == 1'b1))) begin
            axis_src_V_user_V_0_sel_rd <= ~axis_src_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        axis_src_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((axis_src_V_user_V_0_ack_in == 1'b1) & (axis_src_V_user_V_0_vld_in == 1'b1))) begin
            axis_src_V_user_V_0_sel_wr <= ~axis_src_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        axis_src_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((axis_src_V_user_V_0_state == 2'd2) & (axis_src_V_user_V_0_vld_in == 1'b0)) | ((axis_src_V_user_V_0_state == 2'd3) & (axis_src_V_user_V_0_vld_in == 1'b0) & (axis_src_V_user_V_0_ack_out == 1'b1)))) begin
            axis_src_V_user_V_0_state <= 2'd2;
        end else if ((((axis_src_V_user_V_0_state == 2'd1) & (axis_src_V_user_V_0_ack_out == 1'b0)) | ((axis_src_V_user_V_0_state == 2'd3) & (axis_src_V_user_V_0_ack_out == 1'b0) & (axis_src_V_user_V_0_vld_in == 1'b1)))) begin
            axis_src_V_user_V_0_state <= 2'd1;
        end else if (((~((axis_src_V_user_V_0_vld_in == 1'b0) & (axis_src_V_user_V_0_ack_out == 1'b1)) & ~((axis_src_V_user_V_0_ack_out == 1'b0) & (axis_src_V_user_V_0_vld_in == 1'b1)) & (axis_src_V_user_V_0_state == 2'd3)) | ((axis_src_V_user_V_0_state == 2'd1) & (axis_src_V_user_V_0_ack_out == 1'b1)) | ((axis_src_V_user_V_0_state == 2'd2) & (axis_src_V_user_V_0_vld_in == 1'b1)))) begin
            axis_src_V_user_V_0_state <= 2'd3;
        end else begin
            axis_src_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        axis_reader_data_V1_s_reg_203 <= axis_reader_data_V_3_reg_306;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        axis_reader_data_V1_s_reg_203 <= tmp_data_V_reg_468;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_i_i_fu_347_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        axis_reader_data_V_1_reg_235 <= axis_reader_data_V1_s_reg_203;
    end else if (((tmp_72_i_i_i_reg_497 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        axis_reader_data_V_1_reg_235 <= axis_reader_data_V_2_reg_282;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_343)) begin
        if (((brmerge_i_i_i_fu_374_p2 == 1'd1) & (tmp_72_i_i_i_fu_359_p2 == 1'd0))) begin
            axis_reader_data_V_2_reg_282 <= ap_phi_mux_axis_reader_data_V_1_phi_fu_238_p4;
        end else if (((brmerge_i_i_i_fu_374_p2 == 1'd0) & (tmp_72_i_i_i_fu_359_p2 == 1'd0))) begin
            axis_reader_data_V_2_reg_282 <= axis_src_V_data_V_0_data_out;
        end else if ((1'b1 == 1'b1)) begin
            axis_reader_data_V_2_reg_282 <= ap_phi_reg_pp1_iter0_axis_reader_data_V_2_reg_282;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        axis_reader_data_V_3_reg_306 <= axis_reader_data_V_1_reg_235;
    end else if ((~((eol_2_i_i_i_reg_318 == 1'd0) & (axis_src_V_data_V_0_vld_out == 1'b0)) & (eol_2_i_i_i_reg_318 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        axis_reader_data_V_3_reg_306 <= axis_src_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        axis_reader_last_V1_s_reg_193 <= axis_reader_last_V_3_reg_294;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        axis_reader_last_V1_s_reg_193 <= tmp_last_V_reg_476;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_343)) begin
        if (((brmerge_i_i_i_fu_374_p2 == 1'd1) & (tmp_72_i_i_i_fu_359_p2 == 1'd0))) begin
            axis_reader_last_V_2_reg_269 <= ap_phi_mux_eol_phi_fu_227_p4;
        end else if (((brmerge_i_i_i_fu_374_p2 == 1'd0) & (tmp_72_i_i_i_fu_359_p2 == 1'd0))) begin
            axis_reader_last_V_2_reg_269 <= axis_src_V_last_V_0_data_out;
        end else if ((1'b1 == 1'b1)) begin
            axis_reader_last_V_2_reg_269 <= ap_phi_reg_pp1_iter0_axis_reader_last_V_2_reg_269;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        axis_reader_last_V_3_reg_294 <= eol_reg_224;
    end else if ((~((eol_2_i_i_i_reg_318 == 1'd0) & (axis_src_V_data_V_0_vld_out == 1'b0)) & (eol_2_i_i_i_reg_318 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        axis_reader_last_V_3_reg_294 <= axis_src_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        eol_2_i_i_i_reg_318 <= eol_i_i_i_reg_246;
    end else if ((~((eol_2_i_i_i_reg_318 == 1'd0) & (axis_src_V_data_V_0_vld_out == 1'b0)) & (eol_2_i_i_i_reg_318 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        eol_2_i_i_i_reg_318 <= axis_src_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_i_i_fu_347_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        eol_i_i_i_reg_246 <= 1'd0;
    end else if (((tmp_72_i_i_i_reg_497 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        eol_i_i_i_reg_246 <= axis_reader_last_V_2_reg_269;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_i_i_fu_347_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        eol_reg_224 <= axis_reader_last_V1_s_reg_193;
    end else if (((tmp_72_i_i_i_reg_497 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        eol_reg_224 <= axis_reader_last_V_2_reg_269;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_72_i_i_i_fu_359_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sof_1_i_i_i_fu_144 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sof_1_i_i_i_fu_144 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_i_i_fu_347_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        xi_i_i_i_reg_258 <= 10'd0;
    end else if (((tmp_72_i_i_i_fu_359_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        xi_i_i_i_reg_258 <= xi_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        yi_i_i_i_reg_213 <= yi_reg_492;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        yi_i_i_i_reg_213 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_src_V_data_V_0_load_A == 1'b1)) begin
        axis_src_V_data_V_0_payload_A <= axis_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_src_V_data_V_0_load_B == 1'b1)) begin
        axis_src_V_data_V_0_payload_B <= axis_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_src_V_last_V_0_load_A == 1'b1)) begin
        axis_src_V_last_V_0_payload_A <= axis_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_src_V_last_V_0_load_B == 1'b1)) begin
        axis_src_V_last_V_0_payload_B <= axis_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_src_V_user_V_0_load_A == 1'b1)) begin
        axis_src_V_user_V_0_payload_A <= axis_in_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_src_V_user_V_0_load_B == 1'b1)) begin
        axis_src_V_user_V_0_payload_B <= axis_in_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_72_i_i_i_fu_359_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        p_1_cast_i_i_i_reg_515 <= {{ap_phi_mux_axis_reader_data_V_2_phi_fu_286_p4[15:8]}};
        ret_V_reg_510 <= ret_V_fu_380_p1;
        tmp_19_i_reg_520 <= {{ap_phi_mux_axis_reader_data_V_2_phi_fu_286_p4[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        p_1_cast_i_i_i_reg_515_pp1_iter1_reg <= p_1_cast_i_i_i_reg_515;
        tmp_19_i_reg_520_pp1_iter1_reg <= tmp_19_i_reg_520;
        tmp_72_i_i_i_reg_497 <= tmp_72_i_i_i_fu_359_p2;
        tmp_72_i_i_i_reg_497_pp1_iter1_reg <= tmp_72_i_i_i_reg_497;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_72_i_i_i_reg_497 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        p_i_i_i_reg_525 <= p_i_i_i_fu_444_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        tmp_72_i_i_i_reg_497_pp1_iter2_reg <= tmp_72_i_i_i_reg_497_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_72_i_i_i_reg_497_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_77_i_i_i_reg_535 <= {{grp_fu_450_p3[23:16]}};
        tmp_reg_530 <= grp_fu_450_p3[32'd24];
    end
end

always @ (posedge ap_clk) begin
    if (((axis_src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_data_V_reg_468 <= axis_src_V_data_V_0_data_out;
        tmp_last_V_reg_476 <= axis_src_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        yi_reg_492 <= yi_fu_353_p2;
    end
end

always @ (*) begin
    if ((tmp_72_i_i_i_fu_359_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_i_i_fu_347_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_72_i_i_i_reg_497 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_axis_reader_data_V_1_phi_fu_238_p4 = axis_reader_data_V_2_reg_282;
    end else begin
        ap_phi_mux_axis_reader_data_V_1_phi_fu_238_p4 = axis_reader_data_V_1_reg_235;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_461)) begin
        if ((brmerge_i_i_i_fu_374_p2 == 1'd1)) begin
            ap_phi_mux_axis_reader_data_V_2_phi_fu_286_p4 = ap_phi_mux_axis_reader_data_V_1_phi_fu_238_p4;
        end else if ((brmerge_i_i_i_fu_374_p2 == 1'd0)) begin
            ap_phi_mux_axis_reader_data_V_2_phi_fu_286_p4 = axis_src_V_data_V_0_data_out;
        end else begin
            ap_phi_mux_axis_reader_data_V_2_phi_fu_286_p4 = ap_phi_reg_pp1_iter0_axis_reader_data_V_2_reg_282;
        end
    end else begin
        ap_phi_mux_axis_reader_data_V_2_phi_fu_286_p4 = ap_phi_reg_pp1_iter0_axis_reader_data_V_2_reg_282;
    end
end

always @ (*) begin
    if (((tmp_72_i_i_i_reg_497 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_eol_i_i_i_phi_fu_250_p4 = axis_reader_last_V_2_reg_269;
    end else begin
        ap_phi_mux_eol_i_i_i_phi_fu_250_p4 = eol_i_i_i_reg_246;
    end
end

always @ (*) begin
    if (((tmp_72_i_i_i_reg_497 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_eol_phi_fu_227_p4 = axis_reader_last_V_2_reg_269;
    end else begin
        ap_phi_mux_eol_phi_fu_227_p4 = eol_reg_224;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((eol_2_i_i_i_reg_318 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((brmerge_i_i_i_fu_374_p2 == 1'd0) & (tmp_72_i_i_i_fu_359_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        axis_in_TDATA_blk_n = axis_src_V_data_V_0_state[1'd0];
    end else begin
        axis_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((eol_2_i_i_i_reg_318 == 1'd0) & (axis_src_V_data_V_0_vld_out == 1'b0)) & (eol_2_i_i_i_reg_318 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_predicate_op122_read_state5 == 1'b1)) | ((axis_src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        axis_src_V_data_V_0_ack_out = 1'b1;
    end else begin
        axis_src_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((axis_src_V_data_V_0_sel == 1'b1)) begin
        axis_src_V_data_V_0_data_out = axis_src_V_data_V_0_payload_B;
    end else begin
        axis_src_V_data_V_0_data_out = axis_src_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((~((eol_2_i_i_i_reg_318 == 1'd0) & (axis_src_V_data_V_0_vld_out == 1'b0)) & (eol_2_i_i_i_reg_318 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_predicate_op122_read_state5 == 1'b1)) | ((axis_src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        axis_src_V_last_V_0_ack_out = 1'b1;
    end else begin
        axis_src_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((axis_src_V_last_V_0_sel == 1'b1)) begin
        axis_src_V_last_V_0_data_out = axis_src_V_last_V_0_payload_B;
    end else begin
        axis_src_V_last_V_0_data_out = axis_src_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((~((eol_2_i_i_i_reg_318 == 1'd0) & (axis_src_V_data_V_0_vld_out == 1'b0)) & (eol_2_i_i_i_reg_318 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_predicate_op122_read_state5 == 1'b1)) | ((axis_src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        axis_src_V_user_V_0_ack_out = 1'b1;
    end else begin
        axis_src_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((axis_src_V_user_V_0_sel == 1'b1)) begin
        axis_src_V_user_V_0_data_out = axis_src_V_user_V_0_payload_B;
    end else begin
        axis_src_V_user_V_0_data_out = axis_src_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if (((tmp_72_i_i_i_reg_497_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        fifo1_blk_n = fifo1_full_n;
    end else begin
        fifo1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_72_i_i_i_reg_497_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        fifo1_write = 1'b1;
    end else begin
        fifo1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        hist_hthr_blk_n = hist_hthr_empty_n;
    end else begin
        hist_hthr_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        hist_hthr_out_blk_n = hist_hthr_out_full_n;
    end else begin
        hist_hthr_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((hist_lthr_out_full_n == 1'b0) | (hist_hthr_out_full_n == 1'b0) | (hist_lthr_empty_n == 1'b0) | (hist_hthr_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        hist_hthr_out_write = 1'b1;
    end else begin
        hist_hthr_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((hist_lthr_out_full_n == 1'b0) | (hist_hthr_out_full_n == 1'b0) | (hist_lthr_empty_n == 1'b0) | (hist_hthr_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        hist_hthr_read = 1'b1;
    end else begin
        hist_hthr_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        hist_lthr_blk_n = hist_lthr_empty_n;
    end else begin
        hist_lthr_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        hist_lthr_out_blk_n = hist_lthr_out_full_n;
    end else begin
        hist_lthr_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((hist_lthr_out_full_n == 1'b0) | (hist_hthr_out_full_n == 1'b0) | (hist_lthr_empty_n == 1'b0) | (hist_hthr_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        hist_lthr_out_write = 1'b1;
    end else begin
        hist_lthr_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((hist_lthr_out_full_n == 1'b0) | (hist_hthr_out_full_n == 1'b0) | (hist_lthr_empty_n == 1'b0) | (hist_hthr_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        hist_lthr_read = 1'b1;
    end else begin
        hist_lthr_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_i_i_fu_347_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((hist_lthr_out_full_n == 1'b0) | (hist_hthr_out_full_n == 1'b0) | (hist_lthr_empty_n == 1'b0) | (hist_hthr_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_user_V_fu_338_p1 == 1'd0) & (axis_src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((tmp_user_V_fu_338_p1 == 1'd1) & (axis_src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_i_i_i_fu_347_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((tmp_72_i_i_i_fu_359_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((tmp_72_i_i_i_fu_359_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if ((~((eol_2_i_i_i_reg_318 == 1'd0) & (axis_src_V_data_V_0_vld_out == 1'b0)) & (eol_2_i_i_i_reg_318 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else if ((~((eol_2_i_i_i_reg_318 == 1'd0) & (axis_src_V_data_V_0_vld_out == 1'b0)) & (ap_phi_mux_eol_2_i_i_i_phi_fu_321_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd5];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((tmp_72_i_i_i_reg_497_pp1_iter2_reg == 1'd0) & (fifo1_full_n == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((axis_src_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_predicate_op122_read_state5 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((tmp_72_i_i_i_reg_497_pp1_iter2_reg == 1'd0) & (fifo1_full_n == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((axis_src_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_predicate_op122_read_state5 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((tmp_72_i_i_i_reg_497_pp1_iter2_reg == 1'd0) & (fifo1_full_n == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((axis_src_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_predicate_op122_read_state5 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((hist_lthr_out_full_n == 1'b0) | (hist_hthr_out_full_n == 1'b0) | (hist_lthr_empty_n == 1'b0) | (hist_hthr_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state10 = ((eol_2_i_i_i_reg_318 == 1'd0) & (axis_src_V_data_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp1_stage0_iter0 = ((axis_src_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op122_read_state5 == 1'b1));
end

assign ap_block_state6_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp1_stage0_iter3 = ((tmp_72_i_i_i_reg_497_pp1_iter2_reg == 1'd0) & (fifo1_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_343 = ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

always @ (*) begin
    ap_condition_461 = ((tmp_72_i_i_i_fu_359_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_mux_eol_2_i_i_i_phi_fu_321_p4 = eol_2_i_i_i_reg_318;

assign ap_phi_reg_pp1_iter0_axis_reader_data_V_2_reg_282 = 'bx;

assign ap_phi_reg_pp1_iter0_axis_reader_last_V_2_reg_269 = 'bx;

always @ (*) begin
    ap_predicate_op122_read_state5 = ((brmerge_i_i_i_fu_374_p2 == 1'd0) & (tmp_72_i_i_i_fu_359_p2 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign axis_in_TREADY = axis_src_V_last_V_0_state[1'd1];

assign axis_src_V_data_V_0_ack_in = axis_src_V_data_V_0_state[1'd1];

assign axis_src_V_data_V_0_load_A = (~axis_src_V_data_V_0_sel_wr & axis_src_V_data_V_0_state_cmp_full);

assign axis_src_V_data_V_0_load_B = (axis_src_V_data_V_0_state_cmp_full & axis_src_V_data_V_0_sel_wr);

assign axis_src_V_data_V_0_sel = axis_src_V_data_V_0_sel_rd;

assign axis_src_V_data_V_0_state_cmp_full = ((axis_src_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign axis_src_V_data_V_0_vld_in = axis_in_TVALID;

assign axis_src_V_data_V_0_vld_out = axis_src_V_data_V_0_state[1'd0];

assign axis_src_V_last_V_0_ack_in = axis_src_V_last_V_0_state[1'd1];

assign axis_src_V_last_V_0_load_A = (~axis_src_V_last_V_0_sel_wr & axis_src_V_last_V_0_state_cmp_full);

assign axis_src_V_last_V_0_load_B = (axis_src_V_last_V_0_state_cmp_full & axis_src_V_last_V_0_sel_wr);

assign axis_src_V_last_V_0_sel = axis_src_V_last_V_0_sel_rd;

assign axis_src_V_last_V_0_state_cmp_full = ((axis_src_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign axis_src_V_last_V_0_vld_in = axis_in_TVALID;

assign axis_src_V_last_V_0_vld_out = axis_src_V_last_V_0_state[1'd0];

assign axis_src_V_user_V_0_ack_in = axis_src_V_user_V_0_state[1'd1];

assign axis_src_V_user_V_0_load_A = (~axis_src_V_user_V_0_sel_wr & axis_src_V_user_V_0_state_cmp_full);

assign axis_src_V_user_V_0_load_B = (axis_src_V_user_V_0_state_cmp_full & axis_src_V_user_V_0_sel_wr);

assign axis_src_V_user_V_0_sel = axis_src_V_user_V_0_sel_rd;

assign axis_src_V_user_V_0_state_cmp_full = ((axis_src_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign axis_src_V_user_V_0_vld_in = axis_in_TVALID;

assign axis_src_V_user_V_0_vld_out = axis_src_V_user_V_0_state[1'd0];

assign brmerge_i_i_i_fu_374_p2 = (sof_1_i_i_i_fu_144 | ap_phi_mux_eol_i_i_i_phi_fu_250_p4);

assign exitcond_i_i_i_fu_347_p2 = ((yi_i_i_i_reg_213 == 10'd512) ? 1'b1 : 1'b0);

assign fifo1_din = ((tmp_reg_530[0:0] === 1'b1) ? 8'd255 : tmp_77_i_i_i_reg_535);

assign grp_fu_450_p0 = 25'd38469;

assign grp_fu_450_p1 = grp_fu_450_p10;

assign grp_fu_450_p10 = p_1_cast_i_i_i_reg_515_pp1_iter1_reg;

assign grp_fu_450_p2 = grp_fu_450_p20;

assign grp_fu_450_p20 = grp_fu_460_p3;

assign grp_fu_460_p0 = 23'd19595;

assign grp_fu_460_p1 = grp_fu_460_p10;

assign grp_fu_460_p10 = tmp_19_i_reg_520_pp1_iter1_reg;

assign hist_hthr_out_din = hist_hthr_dout;

assign hist_lthr_out_din = hist_lthr_dout;

assign p_i_i_i_fu_444_p0 = 23'd9437;

assign p_i_i_i_fu_444_p1 = p_i_i_i_fu_444_p10;

assign p_i_i_i_fu_444_p10 = ret_V_reg_510;

assign ret_V_fu_380_p1 = ap_phi_mux_axis_reader_data_V_2_phi_fu_286_p4[7:0];

assign start_out = real_start;

assign tmp_72_i_i_i_fu_359_p2 = ((xi_i_i_i_reg_258 == 10'd512) ? 1'b1 : 1'b0);

assign tmp_user_V_fu_338_p1 = axis_src_V_user_V_0_data_out;

assign xi_fu_365_p2 = (xi_i_i_i_reg_258 + 10'd1);

assign yi_fu_353_p2 = (yi_i_i_i_reg_213 + 10'd1);

endmodule //AXIS2GrayArray76
