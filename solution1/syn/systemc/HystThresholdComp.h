// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _HystThresholdComp_HH_
#define _HystThresholdComp_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Sobel_512u_512u_sfYi.h"

namespace ap_rtl {

struct HystThresholdComp : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<8> > fifo6_dout;
    sc_in< sc_logic > fifo6_empty_n;
    sc_out< sc_logic > fifo6_read;
    sc_out< sc_lv<8> > fifo7_din;
    sc_in< sc_logic > fifo7_full_n;
    sc_out< sc_logic > fifo7_write;


    // Module declarations
    HystThresholdComp(sc_module_name name);
    SC_HAS_PROCESS(HystThresholdComp);

    ~HystThresholdComp();

    sc_trace_file* mVcdFile;

    Sobel_512u_512u_sfYi* line_buf_U;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > fifo6_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > tmp_49_i_reg_454;
    sc_signal< sc_logic > fifo7_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > tmp_49_i_reg_454_pp0_iter1_reg;
    sc_signal< sc_lv<10> > xi_i_reg_152;
    sc_signal< sc_lv<1> > tmp_i_fu_163_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<10> > yi_fu_169_p2;
    sc_signal< sc_lv<10> > yi_reg_449;
    sc_signal< sc_lv<1> > tmp_49_i_fu_175_p2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<10> > xi_fu_181_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<9> > line_buf_addr_reg_463;
    sc_signal< sc_lv<1> > not_tmp_53_i_fu_255_p2;
    sc_signal< sc_lv<1> > not_tmp_53_i_reg_469;
    sc_signal< sc_lv<1> > tmp_78_2_i_fu_321_p2;
    sc_signal< sc_lv<1> > tmp_78_2_i_reg_474;
    sc_signal< sc_lv<1> > tmp_78_2_1_i_fu_327_p2;
    sc_signal< sc_lv<1> > tmp_78_2_1_i_reg_479;
    sc_signal< sc_lv<1> > tmp_78_2_2_i_fu_333_p2;
    sc_signal< sc_lv<1> > tmp_78_2_2_i_reg_484;
    sc_signal< sc_lv<1> > tmp5_fu_345_p2;
    sc_signal< sc_lv<1> > tmp5_reg_489;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter1_state4;
    sc_signal< sc_lv<9> > line_buf_address0;
    sc_signal< sc_logic > line_buf_ce0;
    sc_signal< sc_lv<24> > line_buf_q0;
    sc_signal< sc_logic > line_buf_ce1;
    sc_signal< sc_logic > line_buf_we1;
    sc_signal< sc_lv<24> > line_buf_d1;
    sc_signal< sc_lv<10> > yi_i_reg_141;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<64> > tmp_50_i_fu_187_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<8> > window_buf_0_1_fu_84;
    sc_signal< sc_lv<8> > window_buf_0_1_3_fu_88;
    sc_signal< sc_lv<8> > window_buf_0_2_fu_210_p4;
    sc_signal< sc_lv<8> > window_buf_1_1_fu_92;
    sc_signal< sc_lv<8> > window_buf_1_1_3_fu_96;
    sc_signal< sc_lv<8> > window_buf_1_2_fu_220_p4;
    sc_signal< sc_lv<8> > window_buf_2_1_fu_100;
    sc_signal< sc_lv<8> > window_buf_2_1_3_fu_104;
    sc_signal< sc_lv<16> > tmp_26_i_fu_230_p4;
    sc_signal< sc_lv<1> > tmp_78_0_i_fu_249_p2;
    sc_signal< sc_lv<1> > tmp_78_0_1_i_fu_261_p2;
    sc_signal< sc_lv<1> > tmp_78_0_2_i_fu_267_p2;
    sc_signal< sc_lv<1> > tmp_78_1_i_fu_273_p2;
    sc_signal< sc_lv<1> > tmp4_fu_285_p2;
    sc_signal< sc_lv<1> > tmp_fu_279_p2;
    sc_signal< sc_lv<1> > pix_hyst_3_0_2_i3_fu_291_p2;
    sc_signal< sc_lv<1> > tmp_78_1_2_i_fu_309_p2;
    sc_signal< sc_lv<1> > tmp_78_1_1_i_fu_303_p2;
    sc_signal< sc_lv<1> > p_pix_hyst_1_1_2_i_fu_315_p2;
    sc_signal< sc_lv<1> > tmp6_fu_339_p2;
    sc_signal< sc_lv<1> > pix_hyst_3_1_i_fu_297_p2;
    sc_signal< sc_lv<1> > p_pix_hyst_1_2_1_i9_fu_381_p2;
    sc_signal< sc_lv<1> > tmp2_fu_385_p2;
    sc_signal< sc_lv<1> > tmp7_fu_390_p2;
    sc_signal< sc_lv<1> > pix_hyst_3_2_2_i_fu_395_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state6;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<10> ap_const_lv10_200;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<8> ap_const_lv8_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter1_state4();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_fifo6_blk_n();
    void thread_fifo6_read();
    void thread_fifo7_blk_n();
    void thread_fifo7_din();
    void thread_fifo7_write();
    void thread_internal_ap_ready();
    void thread_line_buf_address0();
    void thread_line_buf_ce0();
    void thread_line_buf_ce1();
    void thread_line_buf_d1();
    void thread_line_buf_we1();
    void thread_not_tmp_53_i_fu_255_p2();
    void thread_p_pix_hyst_1_1_2_i_fu_315_p2();
    void thread_p_pix_hyst_1_2_1_i9_fu_381_p2();
    void thread_pix_hyst_3_0_2_i3_fu_291_p2();
    void thread_pix_hyst_3_1_i_fu_297_p2();
    void thread_pix_hyst_3_2_2_i_fu_395_p2();
    void thread_real_start();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp2_fu_385_p2();
    void thread_tmp4_fu_285_p2();
    void thread_tmp5_fu_345_p2();
    void thread_tmp6_fu_339_p2();
    void thread_tmp7_fu_390_p2();
    void thread_tmp_26_i_fu_230_p4();
    void thread_tmp_49_i_fu_175_p2();
    void thread_tmp_50_i_fu_187_p1();
    void thread_tmp_78_0_1_i_fu_261_p2();
    void thread_tmp_78_0_2_i_fu_267_p2();
    void thread_tmp_78_0_i_fu_249_p2();
    void thread_tmp_78_1_1_i_fu_303_p2();
    void thread_tmp_78_1_2_i_fu_309_p2();
    void thread_tmp_78_1_i_fu_273_p2();
    void thread_tmp_78_2_1_i_fu_327_p2();
    void thread_tmp_78_2_2_i_fu_333_p2();
    void thread_tmp_78_2_i_fu_321_p2();
    void thread_tmp_fu_279_p2();
    void thread_tmp_i_fu_163_p2();
    void thread_window_buf_0_2_fu_210_p4();
    void thread_window_buf_1_2_fu_220_p4();
    void thread_xi_fu_181_p2();
    void thread_yi_fu_169_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
