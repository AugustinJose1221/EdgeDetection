// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _GrayArray2AXIS_HH_
#define _GrayArray2AXIS_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct GrayArray2AXIS : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<24> > axis_out_TDATA;
    sc_out< sc_logic > axis_out_TVALID;
    sc_in< sc_logic > axis_out_TREADY;
    sc_out< sc_lv<1> > axis_out_TUSER;
    sc_out< sc_lv<1> > axis_out_TLAST;
    sc_in< sc_lv<8> > fifo7_dout;
    sc_in< sc_logic > fifo7_empty_n;
    sc_out< sc_logic > fifo7_read;


    // Module declarations
    GrayArray2AXIS(sc_module_name name);
    SC_HAS_PROCESS(GrayArray2AXIS);

    ~GrayArray2AXIS();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<24> > axis_dst_V_data_V_1_data_out;
    sc_signal< sc_logic > axis_dst_V_data_V_1_vld_in;
    sc_signal< sc_logic > axis_dst_V_data_V_1_vld_out;
    sc_signal< sc_logic > axis_dst_V_data_V_1_ack_in;
    sc_signal< sc_logic > axis_dst_V_data_V_1_ack_out;
    sc_signal< sc_lv<24> > axis_dst_V_data_V_1_payload_A;
    sc_signal< sc_lv<24> > axis_dst_V_data_V_1_payload_B;
    sc_signal< sc_logic > axis_dst_V_data_V_1_sel_rd;
    sc_signal< sc_logic > axis_dst_V_data_V_1_sel_wr;
    sc_signal< sc_logic > axis_dst_V_data_V_1_sel;
    sc_signal< sc_logic > axis_dst_V_data_V_1_load_A;
    sc_signal< sc_logic > axis_dst_V_data_V_1_load_B;
    sc_signal< sc_lv<2> > axis_dst_V_data_V_1_state;
    sc_signal< sc_logic > axis_dst_V_data_V_1_state_cmp_full;
    sc_signal< sc_lv<1> > axis_dst_V_user_V_1_data_out;
    sc_signal< sc_logic > axis_dst_V_user_V_1_vld_in;
    sc_signal< sc_logic > axis_dst_V_user_V_1_vld_out;
    sc_signal< sc_logic > axis_dst_V_user_V_1_ack_in;
    sc_signal< sc_logic > axis_dst_V_user_V_1_ack_out;
    sc_signal< sc_lv<1> > axis_dst_V_user_V_1_payload_A;
    sc_signal< sc_lv<1> > axis_dst_V_user_V_1_payload_B;
    sc_signal< sc_logic > axis_dst_V_user_V_1_sel_rd;
    sc_signal< sc_logic > axis_dst_V_user_V_1_sel_wr;
    sc_signal< sc_logic > axis_dst_V_user_V_1_sel;
    sc_signal< sc_logic > axis_dst_V_user_V_1_load_A;
    sc_signal< sc_logic > axis_dst_V_user_V_1_load_B;
    sc_signal< sc_lv<2> > axis_dst_V_user_V_1_state;
    sc_signal< sc_logic > axis_dst_V_user_V_1_state_cmp_full;
    sc_signal< sc_lv<1> > axis_dst_V_last_V_1_data_out;
    sc_signal< sc_logic > axis_dst_V_last_V_1_vld_in;
    sc_signal< sc_logic > axis_dst_V_last_V_1_vld_out;
    sc_signal< sc_logic > axis_dst_V_last_V_1_ack_in;
    sc_signal< sc_logic > axis_dst_V_last_V_1_ack_out;
    sc_signal< sc_lv<1> > axis_dst_V_last_V_1_payload_A;
    sc_signal< sc_lv<1> > axis_dst_V_last_V_1_payload_B;
    sc_signal< sc_logic > axis_dst_V_last_V_1_sel_rd;
    sc_signal< sc_logic > axis_dst_V_last_V_1_sel_wr;
    sc_signal< sc_logic > axis_dst_V_last_V_1_sel;
    sc_signal< sc_logic > axis_dst_V_last_V_1_load_A;
    sc_signal< sc_logic > axis_dst_V_last_V_1_load_B;
    sc_signal< sc_lv<2> > axis_dst_V_last_V_1_state;
    sc_signal< sc_logic > axis_dst_V_last_V_1_state_cmp_full;
    sc_signal< sc_logic > axis_out_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > tmp_59_i_reg_181;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > tmp_59_i_reg_181_pp0_iter1_reg;
    sc_signal< sc_logic > fifo7_blk_n;
    sc_signal< sc_lv<10> > xi_i_reg_96;
    sc_signal< sc_lv<9> > tmp_fu_107_p1;
    sc_signal< sc_lv<9> > tmp_reg_167;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< bool > ap_block_state2;
    sc_signal< sc_lv<1> > tmp_i_fu_111_p2;
    sc_signal< sc_lv<10> > yi_fu_117_p2;
    sc_signal< sc_lv<10> > yi_reg_176;
    sc_signal< sc_lv<1> > tmp_59_i_fu_127_p2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_io;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_io;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<10> > xi_fu_133_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > tmp_user_V_fu_144_p2;
    sc_signal< sc_lv<1> > tmp_user_V_reg_190;
    sc_signal< sc_lv<1> > tmp_last_V_fu_150_p2;
    sc_signal< sc_lv<1> > tmp_last_V_reg_195;
    sc_signal< sc_lv<24> > axis_writer_data_V_fu_156_p4;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_lv<10> > yi_i_reg_85;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<9> > tmp_14_fu_123_p1;
    sc_signal< sc_lv<9> > tmp_63_i_fu_139_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<10> ap_const_lv10_200;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<10> ap_const_lv10_1FF;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_io();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_io();
    void thread_ap_block_state5_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_axis_dst_V_data_V_1_ack_in();
    void thread_axis_dst_V_data_V_1_ack_out();
    void thread_axis_dst_V_data_V_1_data_out();
    void thread_axis_dst_V_data_V_1_load_A();
    void thread_axis_dst_V_data_V_1_load_B();
    void thread_axis_dst_V_data_V_1_sel();
    void thread_axis_dst_V_data_V_1_state_cmp_full();
    void thread_axis_dst_V_data_V_1_vld_in();
    void thread_axis_dst_V_data_V_1_vld_out();
    void thread_axis_dst_V_last_V_1_ack_in();
    void thread_axis_dst_V_last_V_1_ack_out();
    void thread_axis_dst_V_last_V_1_data_out();
    void thread_axis_dst_V_last_V_1_load_A();
    void thread_axis_dst_V_last_V_1_load_B();
    void thread_axis_dst_V_last_V_1_sel();
    void thread_axis_dst_V_last_V_1_state_cmp_full();
    void thread_axis_dst_V_last_V_1_vld_in();
    void thread_axis_dst_V_last_V_1_vld_out();
    void thread_axis_dst_V_user_V_1_ack_in();
    void thread_axis_dst_V_user_V_1_ack_out();
    void thread_axis_dst_V_user_V_1_data_out();
    void thread_axis_dst_V_user_V_1_load_A();
    void thread_axis_dst_V_user_V_1_load_B();
    void thread_axis_dst_V_user_V_1_sel();
    void thread_axis_dst_V_user_V_1_state_cmp_full();
    void thread_axis_dst_V_user_V_1_vld_in();
    void thread_axis_dst_V_user_V_1_vld_out();
    void thread_axis_out_TDATA();
    void thread_axis_out_TDATA_blk_n();
    void thread_axis_out_TLAST();
    void thread_axis_out_TUSER();
    void thread_axis_out_TVALID();
    void thread_axis_writer_data_V_fu_156_p4();
    void thread_fifo7_blk_n();
    void thread_fifo7_read();
    void thread_tmp_14_fu_123_p1();
    void thread_tmp_59_i_fu_127_p2();
    void thread_tmp_63_i_fu_139_p2();
    void thread_tmp_fu_107_p1();
    void thread_tmp_i_fu_111_p2();
    void thread_tmp_last_V_fu_150_p2();
    void thread_tmp_user_V_fu_144_p2();
    void thread_xi_fu_133_p2();
    void thread_yi_fu_117_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
