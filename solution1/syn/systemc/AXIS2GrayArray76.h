// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _AXIS2GrayArray76_HH_
#define _AXIS2GrayArray76_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "canny_edge_detectbkb.h"
#include "canny_edge_detectcud.h"
#include "canny_edge_detectdEe.h"

namespace ap_rtl {

struct AXIS2GrayArray76 : public sc_module {
    // Port declarations 30
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<24> > axis_in_TDATA;
    sc_in< sc_logic > axis_in_TVALID;
    sc_out< sc_logic > axis_in_TREADY;
    sc_in< sc_lv<1> > axis_in_TUSER;
    sc_in< sc_lv<1> > axis_in_TLAST;
    sc_in< sc_lv<8> > hist_hthr_dout;
    sc_in< sc_logic > hist_hthr_empty_n;
    sc_out< sc_logic > hist_hthr_read;
    sc_in< sc_lv<8> > hist_lthr_dout;
    sc_in< sc_logic > hist_lthr_empty_n;
    sc_out< sc_logic > hist_lthr_read;
    sc_out< sc_lv<8> > hist_hthr_out_din;
    sc_in< sc_logic > hist_hthr_out_full_n;
    sc_out< sc_logic > hist_hthr_out_write;
    sc_out< sc_lv<8> > hist_lthr_out_din;
    sc_in< sc_logic > hist_lthr_out_full_n;
    sc_out< sc_logic > hist_lthr_out_write;
    sc_out< sc_lv<8> > fifo1_din;
    sc_in< sc_logic > fifo1_full_n;
    sc_out< sc_logic > fifo1_write;


    // Module declarations
    AXIS2GrayArray76(sc_module_name name);
    SC_HAS_PROCESS(AXIS2GrayArray76);

    ~AXIS2GrayArray76();

    sc_trace_file* mVcdFile;

    canny_edge_detectbkb<1,1,15,8,23>* canny_edge_detectbkb_U5;
    canny_edge_detectcud<1,1,17,8,23,25>* canny_edge_detectcud_U6;
    canny_edge_detectdEe<1,1,16,8,23,23>* canny_edge_detectdEe_U7;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_lv<24> > axis_src_V_data_V_0_data_out;
    sc_signal< sc_logic > axis_src_V_data_V_0_vld_in;
    sc_signal< sc_logic > axis_src_V_data_V_0_vld_out;
    sc_signal< sc_logic > axis_src_V_data_V_0_ack_in;
    sc_signal< sc_logic > axis_src_V_data_V_0_ack_out;
    sc_signal< sc_lv<24> > axis_src_V_data_V_0_payload_A;
    sc_signal< sc_lv<24> > axis_src_V_data_V_0_payload_B;
    sc_signal< sc_logic > axis_src_V_data_V_0_sel_rd;
    sc_signal< sc_logic > axis_src_V_data_V_0_sel_wr;
    sc_signal< sc_logic > axis_src_V_data_V_0_sel;
    sc_signal< sc_logic > axis_src_V_data_V_0_load_A;
    sc_signal< sc_logic > axis_src_V_data_V_0_load_B;
    sc_signal< sc_lv<2> > axis_src_V_data_V_0_state;
    sc_signal< sc_logic > axis_src_V_data_V_0_state_cmp_full;
    sc_signal< sc_lv<1> > axis_src_V_user_V_0_data_out;
    sc_signal< sc_logic > axis_src_V_user_V_0_vld_in;
    sc_signal< sc_logic > axis_src_V_user_V_0_vld_out;
    sc_signal< sc_logic > axis_src_V_user_V_0_ack_in;
    sc_signal< sc_logic > axis_src_V_user_V_0_ack_out;
    sc_signal< sc_lv<1> > axis_src_V_user_V_0_payload_A;
    sc_signal< sc_lv<1> > axis_src_V_user_V_0_payload_B;
    sc_signal< sc_logic > axis_src_V_user_V_0_sel_rd;
    sc_signal< sc_logic > axis_src_V_user_V_0_sel_wr;
    sc_signal< sc_logic > axis_src_V_user_V_0_sel;
    sc_signal< sc_logic > axis_src_V_user_V_0_load_A;
    sc_signal< sc_logic > axis_src_V_user_V_0_load_B;
    sc_signal< sc_lv<2> > axis_src_V_user_V_0_state;
    sc_signal< sc_logic > axis_src_V_user_V_0_state_cmp_full;
    sc_signal< sc_lv<1> > axis_src_V_last_V_0_data_out;
    sc_signal< sc_logic > axis_src_V_last_V_0_vld_in;
    sc_signal< sc_logic > axis_src_V_last_V_0_vld_out;
    sc_signal< sc_logic > axis_src_V_last_V_0_ack_in;
    sc_signal< sc_logic > axis_src_V_last_V_0_ack_out;
    sc_signal< sc_lv<1> > axis_src_V_last_V_0_payload_A;
    sc_signal< sc_lv<1> > axis_src_V_last_V_0_payload_B;
    sc_signal< sc_logic > axis_src_V_last_V_0_sel_rd;
    sc_signal< sc_logic > axis_src_V_last_V_0_sel_wr;
    sc_signal< sc_logic > axis_src_V_last_V_0_sel;
    sc_signal< sc_logic > axis_src_V_last_V_0_load_A;
    sc_signal< sc_logic > axis_src_V_last_V_0_load_B;
    sc_signal< sc_lv<2> > axis_src_V_last_V_0_state;
    sc_signal< sc_logic > axis_src_V_last_V_0_state_cmp_full;
    sc_signal< sc_logic > axis_in_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<1> > tmp_72_i_i_i_fu_359_p2;
    sc_signal< sc_lv<1> > brmerge_i_i_i_fu_374_p2;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<1> > ap_phi_mux_eol_2_i_i_i_phi_fu_321_p4;
    sc_signal< sc_logic > hist_hthr_blk_n;
    sc_signal< sc_logic > hist_lthr_blk_n;
    sc_signal< sc_logic > hist_hthr_out_blk_n;
    sc_signal< sc_logic > hist_lthr_out_blk_n;
    sc_signal< sc_logic > fifo1_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter3;
    sc_signal< sc_lv<1> > tmp_72_i_i_i_reg_497;
    sc_signal< sc_lv<1> > tmp_72_i_i_i_reg_497_pp1_iter2_reg;
    sc_signal< sc_lv<1> > eol_reg_224;
    sc_signal< sc_lv<24> > axis_reader_data_V_1_reg_235;
    sc_signal< sc_lv<1> > eol_i_i_i_reg_246;
    sc_signal< sc_lv<10> > xi_i_i_i_reg_258;
    sc_signal< sc_lv<1> > axis_reader_last_V_2_reg_269;
    sc_signal< sc_lv<24> > axis_reader_data_V_2_reg_282;
    sc_signal< sc_lv<24> > tmp_data_V_reg_468;
    sc_signal< sc_lv<1> > tmp_last_V_reg_476;
    sc_signal< sc_lv<1> > exitcond_i_i_i_fu_347_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<10> > yi_fu_353_p2;
    sc_signal< sc_lv<10> > yi_reg_492;
    sc_signal< bool > ap_predicate_op122_read_state5;
    sc_signal< bool > ap_block_state5_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state6_pp1_stage0_iter1;
    sc_signal< bool > ap_block_state7_pp1_stage0_iter2;
    sc_signal< bool > ap_block_state8_pp1_stage0_iter3;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<1> > tmp_72_i_i_i_reg_497_pp1_iter1_reg;
    sc_signal< sc_lv<10> > xi_fu_365_p2;
    sc_signal< sc_lv<8> > ret_V_fu_380_p1;
    sc_signal< sc_lv<8> > ret_V_reg_510;
    sc_signal< sc_lv<8> > p_1_cast_i_i_i_reg_515;
    sc_signal< sc_lv<8> > p_1_cast_i_i_i_reg_515_pp1_iter1_reg;
    sc_signal< sc_lv<8> > tmp_19_i_reg_520;
    sc_signal< sc_lv<8> > tmp_19_i_reg_520_pp1_iter1_reg;
    sc_signal< sc_lv<23> > p_i_i_i_fu_444_p2;
    sc_signal< sc_lv<23> > p_i_i_i_reg_525;
    sc_signal< sc_lv<1> > tmp_reg_530;
    sc_signal< sc_lv<8> > tmp_77_i_i_i_reg_535;
    sc_signal< bool > ap_block_state10;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state5;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter2;
    sc_signal< sc_lv<1> > axis_reader_last_V1_s_reg_193;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > axis_reader_last_V_3_reg_294;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<24> > axis_reader_data_V1_s_reg_203;
    sc_signal< sc_lv<24> > axis_reader_data_V_3_reg_306;
    sc_signal< sc_lv<10> > yi_i_i_i_reg_213;
    sc_signal< sc_lv<1> > ap_phi_mux_eol_phi_fu_227_p4;
    sc_signal< sc_lv<24> > ap_phi_mux_axis_reader_data_V_1_phi_fu_238_p4;
    sc_signal< sc_lv<1> > ap_phi_mux_eol_i_i_i_phi_fu_250_p4;
    sc_signal< sc_lv<1> > ap_phi_reg_pp1_iter0_axis_reader_last_V_2_reg_269;
    sc_signal< sc_lv<24> > ap_phi_mux_axis_reader_data_V_2_phi_fu_286_p4;
    sc_signal< sc_lv<24> > ap_phi_reg_pp1_iter0_axis_reader_data_V_2_reg_282;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<1> > eol_2_i_i_i_reg_318;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp1_stage0_01001;
    sc_signal< sc_lv<1> > sof_1_i_i_i_fu_144;
    sc_signal< sc_lv<23> > grp_fu_460_p3;
    sc_signal< sc_lv<25> > grp_fu_450_p3;
    sc_signal< sc_lv<15> > p_i_i_i_fu_444_p0;
    sc_signal< sc_lv<8> > p_i_i_i_fu_444_p1;
    sc_signal< sc_lv<17> > grp_fu_450_p0;
    sc_signal< sc_lv<8> > grp_fu_450_p1;
    sc_signal< sc_lv<23> > grp_fu_450_p2;
    sc_signal< sc_lv<16> > grp_fu_460_p0;
    sc_signal< sc_lv<8> > grp_fu_460_p1;
    sc_signal< sc_lv<1> > tmp_user_V_fu_338_p1;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    sc_signal< sc_lv<25> > grp_fu_450_p10;
    sc_signal< sc_lv<25> > grp_fu_450_p20;
    sc_signal< sc_lv<23> > grp_fu_460_p10;
    sc_signal< sc_lv<23> > p_i_i_i_fu_444_p10;
    sc_signal< bool > ap_condition_461;
    sc_signal< bool > ap_condition_343;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_fsm_state1;
    static const sc_lv<8> ap_ST_fsm_state2;
    static const sc_lv<8> ap_ST_fsm_state3;
    static const sc_lv<8> ap_ST_fsm_state4;
    static const sc_lv<8> ap_ST_fsm_pp1_stage0;
    static const sc_lv<8> ap_ST_fsm_state9;
    static const sc_lv<8> ap_ST_fsm_state10;
    static const sc_lv<8> ap_ST_fsm_state11;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<10> ap_const_lv10_200;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<23> ap_const_lv23_24DD;
    static const sc_lv<25> ap_const_lv25_9645;
    static const sc_lv<23> ap_const_lv23_4C8B;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_01001();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state10();
    void thread_ap_block_state5_pp1_stage0_iter0();
    void thread_ap_block_state6_pp1_stage0_iter1();
    void thread_ap_block_state7_pp1_stage0_iter2();
    void thread_ap_block_state8_pp1_stage0_iter3();
    void thread_ap_condition_343();
    void thread_ap_condition_461();
    void thread_ap_condition_pp1_exit_iter0_state5();
    void thread_ap_done();
    void thread_ap_enable_pp1();
    void thread_ap_idle();
    void thread_ap_idle_pp1();
    void thread_ap_phi_mux_axis_reader_data_V_1_phi_fu_238_p4();
    void thread_ap_phi_mux_axis_reader_data_V_2_phi_fu_286_p4();
    void thread_ap_phi_mux_eol_2_i_i_i_phi_fu_321_p4();
    void thread_ap_phi_mux_eol_i_i_i_phi_fu_250_p4();
    void thread_ap_phi_mux_eol_phi_fu_227_p4();
    void thread_ap_phi_reg_pp1_iter0_axis_reader_data_V_2_reg_282();
    void thread_ap_phi_reg_pp1_iter0_axis_reader_last_V_2_reg_269();
    void thread_ap_predicate_op122_read_state5();
    void thread_ap_ready();
    void thread_axis_in_TDATA_blk_n();
    void thread_axis_in_TREADY();
    void thread_axis_src_V_data_V_0_ack_in();
    void thread_axis_src_V_data_V_0_ack_out();
    void thread_axis_src_V_data_V_0_data_out();
    void thread_axis_src_V_data_V_0_load_A();
    void thread_axis_src_V_data_V_0_load_B();
    void thread_axis_src_V_data_V_0_sel();
    void thread_axis_src_V_data_V_0_state_cmp_full();
    void thread_axis_src_V_data_V_0_vld_in();
    void thread_axis_src_V_data_V_0_vld_out();
    void thread_axis_src_V_last_V_0_ack_in();
    void thread_axis_src_V_last_V_0_ack_out();
    void thread_axis_src_V_last_V_0_data_out();
    void thread_axis_src_V_last_V_0_load_A();
    void thread_axis_src_V_last_V_0_load_B();
    void thread_axis_src_V_last_V_0_sel();
    void thread_axis_src_V_last_V_0_state_cmp_full();
    void thread_axis_src_V_last_V_0_vld_in();
    void thread_axis_src_V_last_V_0_vld_out();
    void thread_axis_src_V_user_V_0_ack_in();
    void thread_axis_src_V_user_V_0_ack_out();
    void thread_axis_src_V_user_V_0_data_out();
    void thread_axis_src_V_user_V_0_load_A();
    void thread_axis_src_V_user_V_0_load_B();
    void thread_axis_src_V_user_V_0_sel();
    void thread_axis_src_V_user_V_0_state_cmp_full();
    void thread_axis_src_V_user_V_0_vld_in();
    void thread_axis_src_V_user_V_0_vld_out();
    void thread_brmerge_i_i_i_fu_374_p2();
    void thread_exitcond_i_i_i_fu_347_p2();
    void thread_fifo1_blk_n();
    void thread_fifo1_din();
    void thread_fifo1_write();
    void thread_grp_fu_450_p0();
    void thread_grp_fu_450_p1();
    void thread_grp_fu_450_p10();
    void thread_grp_fu_450_p2();
    void thread_grp_fu_450_p20();
    void thread_grp_fu_460_p0();
    void thread_grp_fu_460_p1();
    void thread_grp_fu_460_p10();
    void thread_hist_hthr_blk_n();
    void thread_hist_hthr_out_blk_n();
    void thread_hist_hthr_out_din();
    void thread_hist_hthr_out_write();
    void thread_hist_hthr_read();
    void thread_hist_lthr_blk_n();
    void thread_hist_lthr_out_blk_n();
    void thread_hist_lthr_out_din();
    void thread_hist_lthr_out_write();
    void thread_hist_lthr_read();
    void thread_internal_ap_ready();
    void thread_p_i_i_i_fu_444_p0();
    void thread_p_i_i_i_fu_444_p1();
    void thread_p_i_i_i_fu_444_p10();
    void thread_real_start();
    void thread_ret_V_fu_380_p1();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp_72_i_i_i_fu_359_p2();
    void thread_tmp_user_V_fu_338_p1();
    void thread_xi_fu_365_p2();
    void thread_yi_fu_353_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
