-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AXIS2GrayArray76 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    axis_in_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    axis_in_TVALID : IN STD_LOGIC;
    axis_in_TREADY : OUT STD_LOGIC;
    axis_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    axis_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    hist_hthr_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    hist_hthr_empty_n : IN STD_LOGIC;
    hist_hthr_read : OUT STD_LOGIC;
    hist_lthr_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    hist_lthr_empty_n : IN STD_LOGIC;
    hist_lthr_read : OUT STD_LOGIC;
    hist_hthr_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    hist_hthr_out_full_n : IN STD_LOGIC;
    hist_hthr_out_write : OUT STD_LOGIC;
    hist_lthr_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    hist_lthr_out_full_n : IN STD_LOGIC;
    hist_lthr_out_write : OUT STD_LOGIC;
    fifo1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    fifo1_full_n : IN STD_LOGIC;
    fifo1_write : OUT STD_LOGIC );
end;


architecture behav of AXIS2GrayArray76 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_24DD : STD_LOGIC_VECTOR (22 downto 0) := "00000000010010011011101";
    constant ap_const_lv25_9645 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001001011001000101";
    constant ap_const_lv23_4C8B : STD_LOGIC_VECTOR (22 downto 0) := "00000000100110010001011";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal axis_src_V_data_V_0_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal axis_src_V_data_V_0_vld_in : STD_LOGIC;
    signal axis_src_V_data_V_0_vld_out : STD_LOGIC;
    signal axis_src_V_data_V_0_ack_in : STD_LOGIC;
    signal axis_src_V_data_V_0_ack_out : STD_LOGIC;
    signal axis_src_V_data_V_0_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal axis_src_V_data_V_0_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal axis_src_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal axis_src_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal axis_src_V_data_V_0_sel : STD_LOGIC;
    signal axis_src_V_data_V_0_load_A : STD_LOGIC;
    signal axis_src_V_data_V_0_load_B : STD_LOGIC;
    signal axis_src_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_src_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal axis_src_V_user_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_src_V_user_V_0_vld_in : STD_LOGIC;
    signal axis_src_V_user_V_0_vld_out : STD_LOGIC;
    signal axis_src_V_user_V_0_ack_in : STD_LOGIC;
    signal axis_src_V_user_V_0_ack_out : STD_LOGIC;
    signal axis_src_V_user_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_src_V_user_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_src_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal axis_src_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal axis_src_V_user_V_0_sel : STD_LOGIC;
    signal axis_src_V_user_V_0_load_A : STD_LOGIC;
    signal axis_src_V_user_V_0_load_B : STD_LOGIC;
    signal axis_src_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_src_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal axis_src_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_src_V_last_V_0_vld_in : STD_LOGIC;
    signal axis_src_V_last_V_0_vld_out : STD_LOGIC;
    signal axis_src_V_last_V_0_ack_in : STD_LOGIC;
    signal axis_src_V_last_V_0_ack_out : STD_LOGIC;
    signal axis_src_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_src_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_src_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal axis_src_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal axis_src_V_last_V_0_sel : STD_LOGIC;
    signal axis_src_V_last_V_0_load_A : STD_LOGIC;
    signal axis_src_V_last_V_0_load_B : STD_LOGIC;
    signal axis_src_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_src_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal axis_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal tmp_72_i_i_i_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_phi_mux_eol_2_i_i_i_phi_fu_321_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal hist_hthr_blk_n : STD_LOGIC;
    signal hist_lthr_blk_n : STD_LOGIC;
    signal hist_hthr_out_blk_n : STD_LOGIC;
    signal hist_lthr_out_blk_n : STD_LOGIC;
    signal fifo1_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal tmp_72_i_i_i_reg_497 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_72_i_i_i_reg_497_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal eol_reg_224 : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_reader_data_V_1_reg_235 : STD_LOGIC_VECTOR (23 downto 0);
    signal eol_i_i_i_reg_246 : STD_LOGIC_VECTOR (0 downto 0);
    signal xi_i_i_i_reg_258 : STD_LOGIC_VECTOR (9 downto 0);
    signal axis_reader_last_V_2_reg_269 : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_reader_data_V_2_reg_282 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_data_V_reg_468 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_last_V_reg_476 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_i_i_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal yi_fu_353_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal yi_reg_492 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_predicate_op122_read_state5 : BOOLEAN;
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal tmp_72_i_i_i_reg_497_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xi_fu_365_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_fu_380_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_reg_510 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_1_cast_i_i_i_reg_515 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_1_cast_i_i_i_reg_515_pp1_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_i_reg_520 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_i_reg_520_pp1_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_i_i_i_fu_444_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_i_i_i_reg_525 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_reg_530 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_77_i_i_i_reg_535 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state10 : BOOLEAN;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal axis_reader_last_V1_s_reg_193 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal axis_reader_last_V_3_reg_294 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal axis_reader_data_V1_s_reg_203 : STD_LOGIC_VECTOR (23 downto 0);
    signal axis_reader_data_V_3_reg_306 : STD_LOGIC_VECTOR (23 downto 0);
    signal yi_i_i_i_reg_213 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_eol_phi_fu_227_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_axis_reader_data_V_1_phi_fu_238_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_phi_mux_eol_i_i_i_phi_fu_250_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp1_iter0_axis_reader_last_V_2_reg_269 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_axis_reader_data_V_2_phi_fu_286_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_phi_reg_pp1_iter0_axis_reader_data_V_2_reg_282 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal eol_2_i_i_i_reg_318 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal sof_1_i_i_i_fu_144 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_460_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_450_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_i_i_i_fu_444_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_i_i_i_fu_444_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_450_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_450_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_450_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_460_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_460_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_fu_338_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal grp_fu_450_p10 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_450_p20 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_460_p10 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_i_i_i_fu_444_p10 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_condition_461 : BOOLEAN;
    signal ap_condition_343 : BOOLEAN;

    component canny_edge_detectbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component canny_edge_detectcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (22 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component canny_edge_detectdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (22 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;



begin
    canny_edge_detectbkb_U5 : component canny_edge_detectbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 8,
        dout_WIDTH => 23)
    port map (
        din0 => p_i_i_i_fu_444_p0,
        din1 => p_i_i_i_fu_444_p1,
        dout => p_i_i_i_fu_444_p2);

    canny_edge_detectcud_U6 : component canny_edge_detectcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 8,
        din2_WIDTH => 23,
        dout_WIDTH => 25)
    port map (
        din0 => grp_fu_450_p0,
        din1 => grp_fu_450_p1,
        din2 => grp_fu_450_p2,
        dout => grp_fu_450_p3);

    canny_edge_detectdEe_U7 : component canny_edge_detectdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 23,
        dout_WIDTH => 23)
    port map (
        din0 => grp_fu_460_p0,
        din1 => grp_fu_460_p1,
        din2 => p_i_i_i_reg_525,
        dout => grp_fu_460_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((exitcond_i_i_i_fu_347_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((exitcond_i_i_i_fu_347_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state5);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                elsif (((exitcond_i_i_i_fu_347_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    axis_src_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_src_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((axis_src_V_data_V_0_ack_out = ap_const_logic_1) and (axis_src_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        axis_src_V_data_V_0_sel_rd <= not(axis_src_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_src_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_src_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((axis_src_V_data_V_0_ack_in = ap_const_logic_1) and (axis_src_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        axis_src_V_data_V_0_sel_wr <= not(axis_src_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_src_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_src_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((axis_src_V_data_V_0_state = ap_const_lv2_2) and (axis_src_V_data_V_0_vld_in = ap_const_logic_0)) or ((axis_src_V_data_V_0_state = ap_const_lv2_3) and (axis_src_V_data_V_0_vld_in = ap_const_logic_0) and (axis_src_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    axis_src_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((axis_src_V_data_V_0_state = ap_const_lv2_1) and (axis_src_V_data_V_0_ack_out = ap_const_logic_0)) or ((axis_src_V_data_V_0_state = ap_const_lv2_3) and (axis_src_V_data_V_0_ack_out = ap_const_logic_0) and (axis_src_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    axis_src_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((axis_src_V_data_V_0_vld_in = ap_const_logic_0) and (axis_src_V_data_V_0_ack_out = ap_const_logic_1))) and not(((axis_src_V_data_V_0_ack_out = ap_const_logic_0) and (axis_src_V_data_V_0_vld_in = ap_const_logic_1))) and (axis_src_V_data_V_0_state = ap_const_lv2_3)) or ((axis_src_V_data_V_0_state = ap_const_lv2_1) and (axis_src_V_data_V_0_ack_out = ap_const_logic_1)) or ((axis_src_V_data_V_0_state = ap_const_lv2_2) and (axis_src_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    axis_src_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    axis_src_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_src_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_src_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((axis_src_V_last_V_0_ack_out = ap_const_logic_1) and (axis_src_V_last_V_0_vld_out = ap_const_logic_1))) then 
                                        axis_src_V_last_V_0_sel_rd <= not(axis_src_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_src_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_src_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((axis_src_V_last_V_0_ack_in = ap_const_logic_1) and (axis_src_V_last_V_0_vld_in = ap_const_logic_1))) then 
                                        axis_src_V_last_V_0_sel_wr <= not(axis_src_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_src_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_src_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((axis_src_V_last_V_0_state = ap_const_lv2_2) and (axis_src_V_last_V_0_vld_in = ap_const_logic_0)) or ((axis_src_V_last_V_0_state = ap_const_lv2_3) and (axis_src_V_last_V_0_vld_in = ap_const_logic_0) and (axis_src_V_last_V_0_ack_out = ap_const_logic_1)))) then 
                    axis_src_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((axis_src_V_last_V_0_state = ap_const_lv2_1) and (axis_src_V_last_V_0_ack_out = ap_const_logic_0)) or ((axis_src_V_last_V_0_state = ap_const_lv2_3) and (axis_src_V_last_V_0_ack_out = ap_const_logic_0) and (axis_src_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    axis_src_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((axis_src_V_last_V_0_vld_in = ap_const_logic_0) and (axis_src_V_last_V_0_ack_out = ap_const_logic_1))) and not(((axis_src_V_last_V_0_ack_out = ap_const_logic_0) and (axis_src_V_last_V_0_vld_in = ap_const_logic_1))) and (axis_src_V_last_V_0_state = ap_const_lv2_3)) or ((axis_src_V_last_V_0_state = ap_const_lv2_1) and (axis_src_V_last_V_0_ack_out = ap_const_logic_1)) or ((axis_src_V_last_V_0_state = ap_const_lv2_2) and (axis_src_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    axis_src_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    axis_src_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_src_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_src_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((axis_src_V_user_V_0_ack_out = ap_const_logic_1) and (axis_src_V_user_V_0_vld_out = ap_const_logic_1))) then 
                                        axis_src_V_user_V_0_sel_rd <= not(axis_src_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_src_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_src_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((axis_src_V_user_V_0_ack_in = ap_const_logic_1) and (axis_src_V_user_V_0_vld_in = ap_const_logic_1))) then 
                                        axis_src_V_user_V_0_sel_wr <= not(axis_src_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_src_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_src_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((axis_src_V_user_V_0_state = ap_const_lv2_2) and (axis_src_V_user_V_0_vld_in = ap_const_logic_0)) or ((axis_src_V_user_V_0_state = ap_const_lv2_3) and (axis_src_V_user_V_0_vld_in = ap_const_logic_0) and (axis_src_V_user_V_0_ack_out = ap_const_logic_1)))) then 
                    axis_src_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((axis_src_V_user_V_0_state = ap_const_lv2_1) and (axis_src_V_user_V_0_ack_out = ap_const_logic_0)) or ((axis_src_V_user_V_0_state = ap_const_lv2_3) and (axis_src_V_user_V_0_ack_out = ap_const_logic_0) and (axis_src_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    axis_src_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((axis_src_V_user_V_0_vld_in = ap_const_logic_0) and (axis_src_V_user_V_0_ack_out = ap_const_logic_1))) and not(((axis_src_V_user_V_0_ack_out = ap_const_logic_0) and (axis_src_V_user_V_0_vld_in = ap_const_logic_1))) and (axis_src_V_user_V_0_state = ap_const_lv2_3)) or ((axis_src_V_user_V_0_state = ap_const_lv2_1) and (axis_src_V_user_V_0_ack_out = ap_const_logic_1)) or ((axis_src_V_user_V_0_state = ap_const_lv2_2) and (axis_src_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    axis_src_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    axis_src_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    axis_reader_data_V1_s_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                axis_reader_data_V1_s_reg_203 <= axis_reader_data_V_3_reg_306;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                axis_reader_data_V1_s_reg_203 <= tmp_data_V_reg_468;
            end if; 
        end if;
    end process;

    axis_reader_data_V_1_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_i_i_fu_347_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                axis_reader_data_V_1_reg_235 <= axis_reader_data_V1_s_reg_203;
            elsif (((tmp_72_i_i_i_reg_497 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                axis_reader_data_V_1_reg_235 <= axis_reader_data_V_2_reg_282;
            end if; 
        end if;
    end process;

    axis_reader_data_V_2_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_343)) then
                if (((brmerge_i_i_i_fu_374_p2 = ap_const_lv1_1) and (tmp_72_i_i_i_fu_359_p2 = ap_const_lv1_0))) then 
                    axis_reader_data_V_2_reg_282 <= ap_phi_mux_axis_reader_data_V_1_phi_fu_238_p4;
                elsif (((brmerge_i_i_i_fu_374_p2 = ap_const_lv1_0) and (tmp_72_i_i_i_fu_359_p2 = ap_const_lv1_0))) then 
                    axis_reader_data_V_2_reg_282 <= axis_src_V_data_V_0_data_out;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    axis_reader_data_V_2_reg_282 <= ap_phi_reg_pp1_iter0_axis_reader_data_V_2_reg_282;
                end if;
            end if; 
        end if;
    end process;

    axis_reader_data_V_3_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                axis_reader_data_V_3_reg_306 <= axis_reader_data_V_1_reg_235;
            elsif ((not(((eol_2_i_i_i_reg_318 = ap_const_lv1_0) and (axis_src_V_data_V_0_vld_out = ap_const_logic_0))) and (eol_2_i_i_i_reg_318 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                axis_reader_data_V_3_reg_306 <= axis_src_V_data_V_0_data_out;
            end if; 
        end if;
    end process;

    axis_reader_last_V1_s_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                axis_reader_last_V1_s_reg_193 <= axis_reader_last_V_3_reg_294;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                axis_reader_last_V1_s_reg_193 <= tmp_last_V_reg_476;
            end if; 
        end if;
    end process;

    axis_reader_last_V_2_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_343)) then
                if (((brmerge_i_i_i_fu_374_p2 = ap_const_lv1_1) and (tmp_72_i_i_i_fu_359_p2 = ap_const_lv1_0))) then 
                    axis_reader_last_V_2_reg_269 <= ap_phi_mux_eol_phi_fu_227_p4;
                elsif (((brmerge_i_i_i_fu_374_p2 = ap_const_lv1_0) and (tmp_72_i_i_i_fu_359_p2 = ap_const_lv1_0))) then 
                    axis_reader_last_V_2_reg_269 <= axis_src_V_last_V_0_data_out;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    axis_reader_last_V_2_reg_269 <= ap_phi_reg_pp1_iter0_axis_reader_last_V_2_reg_269;
                end if;
            end if; 
        end if;
    end process;

    axis_reader_last_V_3_reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                axis_reader_last_V_3_reg_294 <= eol_reg_224;
            elsif ((not(((eol_2_i_i_i_reg_318 = ap_const_lv1_0) and (axis_src_V_data_V_0_vld_out = ap_const_logic_0))) and (eol_2_i_i_i_reg_318 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                axis_reader_last_V_3_reg_294 <= axis_src_V_last_V_0_data_out;
            end if; 
        end if;
    end process;

    eol_2_i_i_i_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                eol_2_i_i_i_reg_318 <= eol_i_i_i_reg_246;
            elsif ((not(((eol_2_i_i_i_reg_318 = ap_const_lv1_0) and (axis_src_V_data_V_0_vld_out = ap_const_logic_0))) and (eol_2_i_i_i_reg_318 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                eol_2_i_i_i_reg_318 <= axis_src_V_last_V_0_data_out;
            end if; 
        end if;
    end process;

    eol_i_i_i_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_i_i_fu_347_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                eol_i_i_i_reg_246 <= ap_const_lv1_0;
            elsif (((tmp_72_i_i_i_reg_497 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                eol_i_i_i_reg_246 <= axis_reader_last_V_2_reg_269;
            end if; 
        end if;
    end process;

    eol_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_i_i_fu_347_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                eol_reg_224 <= axis_reader_last_V1_s_reg_193;
            elsif (((tmp_72_i_i_i_reg_497 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                eol_reg_224 <= axis_reader_last_V_2_reg_269;
            end if; 
        end if;
    end process;

    sof_1_i_i_i_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_72_i_i_i_fu_359_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                sof_1_i_i_i_fu_144 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                sof_1_i_i_i_fu_144 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    xi_i_i_i_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_i_i_fu_347_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                xi_i_i_i_reg_258 <= ap_const_lv10_0;
            elsif (((tmp_72_i_i_i_fu_359_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                xi_i_i_i_reg_258 <= xi_fu_365_p2;
            end if; 
        end if;
    end process;

    yi_i_i_i_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                yi_i_i_i_reg_213 <= yi_reg_492;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                yi_i_i_i_reg_213 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_src_V_data_V_0_load_A = ap_const_logic_1)) then
                axis_src_V_data_V_0_payload_A <= axis_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_src_V_data_V_0_load_B = ap_const_logic_1)) then
                axis_src_V_data_V_0_payload_B <= axis_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_src_V_last_V_0_load_A = ap_const_logic_1)) then
                axis_src_V_last_V_0_payload_A <= axis_in_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_src_V_last_V_0_load_B = ap_const_logic_1)) then
                axis_src_V_last_V_0_payload_B <= axis_in_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_src_V_user_V_0_load_A = ap_const_logic_1)) then
                axis_src_V_user_V_0_payload_A <= axis_in_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_src_V_user_V_0_load_B = ap_const_logic_1)) then
                axis_src_V_user_V_0_payload_B <= axis_in_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_72_i_i_i_fu_359_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                p_1_cast_i_i_i_reg_515 <= ap_phi_mux_axis_reader_data_V_2_phi_fu_286_p4(15 downto 8);
                ret_V_reg_510 <= ret_V_fu_380_p1;
                tmp_19_i_reg_520 <= ap_phi_mux_axis_reader_data_V_2_phi_fu_286_p4(23 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                p_1_cast_i_i_i_reg_515_pp1_iter1_reg <= p_1_cast_i_i_i_reg_515;
                tmp_19_i_reg_520_pp1_iter1_reg <= tmp_19_i_reg_520;
                tmp_72_i_i_i_reg_497 <= tmp_72_i_i_i_fu_359_p2;
                tmp_72_i_i_i_reg_497_pp1_iter1_reg <= tmp_72_i_i_i_reg_497;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_72_i_i_i_reg_497 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                p_i_i_i_reg_525 <= p_i_i_i_fu_444_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                tmp_72_i_i_i_reg_497_pp1_iter2_reg <= tmp_72_i_i_i_reg_497_pp1_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_72_i_i_i_reg_497_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                tmp_77_i_i_i_reg_535 <= grp_fu_450_p3(23 downto 16);
                tmp_reg_530 <= grp_fu_450_p3(24 downto 24);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((axis_src_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_data_V_reg_468 <= axis_src_V_data_V_0_data_out;
                tmp_last_V_reg_476 <= axis_src_V_last_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                yi_reg_492 <= yi_fu_353_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, axis_src_V_data_V_0_vld_out, hist_hthr_empty_n, hist_lthr_empty_n, hist_hthr_out_full_n, hist_lthr_out_full_n, ap_CS_fsm_state2, ap_enable_reg_pp1_iter0, tmp_72_i_i_i_fu_359_p2, ap_CS_fsm_state10, ap_phi_mux_eol_2_i_i_i_phi_fu_321_p4, ap_enable_reg_pp1_iter3, exitcond_i_i_i_fu_347_p2, ap_CS_fsm_state4, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, eol_2_i_i_i_reg_318, tmp_user_V_fu_338_p1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((hist_lthr_out_full_n = ap_const_logic_0) or (hist_hthr_out_full_n = ap_const_logic_0) or (hist_lthr_empty_n = ap_const_logic_0) or (hist_hthr_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_user_V_fu_338_p1 = ap_const_lv1_0) and (axis_src_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((tmp_user_V_fu_338_p1 = ap_const_lv1_1) and (axis_src_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((exitcond_i_i_i_fu_347_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((tmp_72_i_i_i_fu_359_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)) or ((tmp_72_i_i_i_fu_359_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if ((not(((eol_2_i_i_i_reg_318 = ap_const_lv1_0) and (axis_src_V_data_V_0_vld_out = ap_const_logic_0))) and (eol_2_i_i_i_reg_318 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif ((not(((eol_2_i_i_i_reg_318 = ap_const_lv1_0) and (axis_src_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_phi_mux_eol_2_i_i_i_phi_fu_321_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(6);
    ap_CS_fsm_state11 <= ap_CS_fsm(7);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state9 <= ap_CS_fsm(5);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(axis_src_V_data_V_0_vld_out, fifo1_full_n, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, tmp_72_i_i_i_reg_497_pp1_iter2_reg, ap_predicate_op122_read_state5)
    begin
                ap_block_pp1_stage0_01001 <= (((tmp_72_i_i_i_reg_497_pp1_iter2_reg = ap_const_lv1_0) and (fifo1_full_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)) or ((axis_src_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_predicate_op122_read_state5 = ap_const_boolean_1)));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(axis_src_V_data_V_0_vld_out, fifo1_full_n, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, tmp_72_i_i_i_reg_497_pp1_iter2_reg, ap_predicate_op122_read_state5)
    begin
                ap_block_pp1_stage0_11001 <= (((tmp_72_i_i_i_reg_497_pp1_iter2_reg = ap_const_lv1_0) and (fifo1_full_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)) or ((axis_src_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_predicate_op122_read_state5 = ap_const_boolean_1)));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(axis_src_V_data_V_0_vld_out, fifo1_full_n, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, tmp_72_i_i_i_reg_497_pp1_iter2_reg, ap_predicate_op122_read_state5)
    begin
                ap_block_pp1_stage0_subdone <= (((tmp_72_i_i_i_reg_497_pp1_iter2_reg = ap_const_lv1_0) and (fifo1_full_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)) or ((axis_src_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_predicate_op122_read_state5 = ap_const_boolean_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, hist_hthr_empty_n, hist_lthr_empty_n, hist_hthr_out_full_n, hist_lthr_out_full_n)
    begin
                ap_block_state1 <= ((hist_lthr_out_full_n = ap_const_logic_0) or (hist_hthr_out_full_n = ap_const_logic_0) or (hist_lthr_empty_n = ap_const_logic_0) or (hist_hthr_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state10_assign_proc : process(axis_src_V_data_V_0_vld_out, eol_2_i_i_i_reg_318)
    begin
                ap_block_state10 <= ((eol_2_i_i_i_reg_318 = ap_const_lv1_0) and (axis_src_V_data_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state5_pp1_stage0_iter0_assign_proc : process(axis_src_V_data_V_0_vld_out, ap_predicate_op122_read_state5)
    begin
                ap_block_state5_pp1_stage0_iter0 <= ((axis_src_V_data_V_0_vld_out = ap_const_logic_0) and (ap_predicate_op122_read_state5 = ap_const_boolean_1));
    end process;

        ap_block_state6_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp1_stage0_iter3_assign_proc : process(fifo1_full_n, tmp_72_i_i_i_reg_497_pp1_iter2_reg)
    begin
                ap_block_state8_pp1_stage0_iter3 <= ((tmp_72_i_i_i_reg_497_pp1_iter2_reg = ap_const_lv1_0) and (fifo1_full_n = ap_const_logic_0));
    end process;


    ap_condition_343_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001)
    begin
                ap_condition_343 <= ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0));
    end process;


    ap_condition_461_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, tmp_72_i_i_i_fu_359_p2)
    begin
                ap_condition_461 <= ((tmp_72_i_i_i_fu_359_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0));
    end process;


    ap_condition_pp1_exit_iter0_state5_assign_proc : process(tmp_72_i_i_i_fu_359_p2)
    begin
        if ((tmp_72_i_i_i_fu_359_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, exitcond_i_i_i_fu_347_p2, ap_CS_fsm_state4)
    begin
        if (((exitcond_i_i_i_fu_347_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_axis_reader_data_V_1_phi_fu_238_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, tmp_72_i_i_i_reg_497, axis_reader_data_V_1_reg_235, axis_reader_data_V_2_reg_282, ap_enable_reg_pp1_iter1)
    begin
        if (((tmp_72_i_i_i_reg_497 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_axis_reader_data_V_1_phi_fu_238_p4 <= axis_reader_data_V_2_reg_282;
        else 
            ap_phi_mux_axis_reader_data_V_1_phi_fu_238_p4 <= axis_reader_data_V_1_reg_235;
        end if; 
    end process;


    ap_phi_mux_axis_reader_data_V_2_phi_fu_286_p4_assign_proc : process(axis_src_V_data_V_0_data_out, brmerge_i_i_i_fu_374_p2, ap_phi_mux_axis_reader_data_V_1_phi_fu_238_p4, ap_phi_reg_pp1_iter0_axis_reader_data_V_2_reg_282, ap_condition_461)
    begin
        if ((ap_const_boolean_1 = ap_condition_461)) then
            if ((brmerge_i_i_i_fu_374_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_axis_reader_data_V_2_phi_fu_286_p4 <= ap_phi_mux_axis_reader_data_V_1_phi_fu_238_p4;
            elsif ((brmerge_i_i_i_fu_374_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_axis_reader_data_V_2_phi_fu_286_p4 <= axis_src_V_data_V_0_data_out;
            else 
                ap_phi_mux_axis_reader_data_V_2_phi_fu_286_p4 <= ap_phi_reg_pp1_iter0_axis_reader_data_V_2_reg_282;
            end if;
        else 
            ap_phi_mux_axis_reader_data_V_2_phi_fu_286_p4 <= ap_phi_reg_pp1_iter0_axis_reader_data_V_2_reg_282;
        end if; 
    end process;

    ap_phi_mux_eol_2_i_i_i_phi_fu_321_p4 <= eol_2_i_i_i_reg_318;

    ap_phi_mux_eol_i_i_i_phi_fu_250_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, tmp_72_i_i_i_reg_497, eol_i_i_i_reg_246, axis_reader_last_V_2_reg_269, ap_enable_reg_pp1_iter1)
    begin
        if (((tmp_72_i_i_i_reg_497 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_eol_i_i_i_phi_fu_250_p4 <= axis_reader_last_V_2_reg_269;
        else 
            ap_phi_mux_eol_i_i_i_phi_fu_250_p4 <= eol_i_i_i_reg_246;
        end if; 
    end process;


    ap_phi_mux_eol_phi_fu_227_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, tmp_72_i_i_i_reg_497, eol_reg_224, axis_reader_last_V_2_reg_269, ap_enable_reg_pp1_iter1)
    begin
        if (((tmp_72_i_i_i_reg_497 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_eol_phi_fu_227_p4 <= axis_reader_last_V_2_reg_269;
        else 
            ap_phi_mux_eol_phi_fu_227_p4 <= eol_reg_224;
        end if; 
    end process;

    ap_phi_reg_pp1_iter0_axis_reader_data_V_2_reg_282 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp1_iter0_axis_reader_last_V_2_reg_269 <= "X";

    ap_predicate_op122_read_state5_assign_proc : process(tmp_72_i_i_i_fu_359_p2, brmerge_i_i_i_fu_374_p2)
    begin
                ap_predicate_op122_read_state5 <= ((brmerge_i_i_i_fu_374_p2 = ap_const_lv1_0) and (tmp_72_i_i_i_fu_359_p2 = ap_const_lv1_0));
    end process;

    ap_ready <= internal_ap_ready;

    axis_in_TDATA_blk_n_assign_proc : process(axis_src_V_data_V_0_state, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, tmp_72_i_i_i_fu_359_p2, brmerge_i_i_i_fu_374_p2, ap_CS_fsm_state10, eol_2_i_i_i_reg_318)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((eol_2_i_i_i_reg_318 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((brmerge_i_i_i_fu_374_p2 = ap_const_lv1_0) and (tmp_72_i_i_i_fu_359_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            axis_in_TDATA_blk_n <= axis_src_V_data_V_0_state(0);
        else 
            axis_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    axis_in_TREADY <= axis_src_V_last_V_0_state(1);
    axis_src_V_data_V_0_ack_in <= axis_src_V_data_V_0_state(1);

    axis_src_V_data_V_0_ack_out_assign_proc : process(axis_src_V_data_V_0_vld_out, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state10, ap_predicate_op122_read_state5, ap_block_pp1_stage0_11001, eol_2_i_i_i_reg_318)
    begin
        if (((not(((eol_2_i_i_i_reg_318 = ap_const_lv1_0) and (axis_src_V_data_V_0_vld_out = ap_const_logic_0))) and (eol_2_i_i_i_reg_318 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_predicate_op122_read_state5 = ap_const_boolean_1)) or ((axis_src_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            axis_src_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            axis_src_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    axis_src_V_data_V_0_data_out_assign_proc : process(axis_src_V_data_V_0_payload_A, axis_src_V_data_V_0_payload_B, axis_src_V_data_V_0_sel)
    begin
        if ((axis_src_V_data_V_0_sel = ap_const_logic_1)) then 
            axis_src_V_data_V_0_data_out <= axis_src_V_data_V_0_payload_B;
        else 
            axis_src_V_data_V_0_data_out <= axis_src_V_data_V_0_payload_A;
        end if; 
    end process;

    axis_src_V_data_V_0_load_A <= (not(axis_src_V_data_V_0_sel_wr) and axis_src_V_data_V_0_state_cmp_full);
    axis_src_V_data_V_0_load_B <= (axis_src_V_data_V_0_state_cmp_full and axis_src_V_data_V_0_sel_wr);
    axis_src_V_data_V_0_sel <= axis_src_V_data_V_0_sel_rd;
    axis_src_V_data_V_0_state_cmp_full <= '0' when (axis_src_V_data_V_0_state = ap_const_lv2_1) else '1';
    axis_src_V_data_V_0_vld_in <= axis_in_TVALID;
    axis_src_V_data_V_0_vld_out <= axis_src_V_data_V_0_state(0);
    axis_src_V_last_V_0_ack_in <= axis_src_V_last_V_0_state(1);

    axis_src_V_last_V_0_ack_out_assign_proc : process(axis_src_V_data_V_0_vld_out, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state10, ap_predicate_op122_read_state5, ap_block_pp1_stage0_11001, eol_2_i_i_i_reg_318)
    begin
        if (((not(((eol_2_i_i_i_reg_318 = ap_const_lv1_0) and (axis_src_V_data_V_0_vld_out = ap_const_logic_0))) and (eol_2_i_i_i_reg_318 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_predicate_op122_read_state5 = ap_const_boolean_1)) or ((axis_src_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            axis_src_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            axis_src_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    axis_src_V_last_V_0_data_out_assign_proc : process(axis_src_V_last_V_0_payload_A, axis_src_V_last_V_0_payload_B, axis_src_V_last_V_0_sel)
    begin
        if ((axis_src_V_last_V_0_sel = ap_const_logic_1)) then 
            axis_src_V_last_V_0_data_out <= axis_src_V_last_V_0_payload_B;
        else 
            axis_src_V_last_V_0_data_out <= axis_src_V_last_V_0_payload_A;
        end if; 
    end process;

    axis_src_V_last_V_0_load_A <= (not(axis_src_V_last_V_0_sel_wr) and axis_src_V_last_V_0_state_cmp_full);
    axis_src_V_last_V_0_load_B <= (axis_src_V_last_V_0_state_cmp_full and axis_src_V_last_V_0_sel_wr);
    axis_src_V_last_V_0_sel <= axis_src_V_last_V_0_sel_rd;
    axis_src_V_last_V_0_state_cmp_full <= '0' when (axis_src_V_last_V_0_state = ap_const_lv2_1) else '1';
    axis_src_V_last_V_0_vld_in <= axis_in_TVALID;
    axis_src_V_last_V_0_vld_out <= axis_src_V_last_V_0_state(0);
    axis_src_V_user_V_0_ack_in <= axis_src_V_user_V_0_state(1);

    axis_src_V_user_V_0_ack_out_assign_proc : process(axis_src_V_data_V_0_vld_out, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state10, ap_predicate_op122_read_state5, ap_block_pp1_stage0_11001, eol_2_i_i_i_reg_318)
    begin
        if (((not(((eol_2_i_i_i_reg_318 = ap_const_lv1_0) and (axis_src_V_data_V_0_vld_out = ap_const_logic_0))) and (eol_2_i_i_i_reg_318 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_predicate_op122_read_state5 = ap_const_boolean_1)) or ((axis_src_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            axis_src_V_user_V_0_ack_out <= ap_const_logic_1;
        else 
            axis_src_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    axis_src_V_user_V_0_data_out_assign_proc : process(axis_src_V_user_V_0_payload_A, axis_src_V_user_V_0_payload_B, axis_src_V_user_V_0_sel)
    begin
        if ((axis_src_V_user_V_0_sel = ap_const_logic_1)) then 
            axis_src_V_user_V_0_data_out <= axis_src_V_user_V_0_payload_B;
        else 
            axis_src_V_user_V_0_data_out <= axis_src_V_user_V_0_payload_A;
        end if; 
    end process;

    axis_src_V_user_V_0_load_A <= (not(axis_src_V_user_V_0_sel_wr) and axis_src_V_user_V_0_state_cmp_full);
    axis_src_V_user_V_0_load_B <= (axis_src_V_user_V_0_state_cmp_full and axis_src_V_user_V_0_sel_wr);
    axis_src_V_user_V_0_sel <= axis_src_V_user_V_0_sel_rd;
    axis_src_V_user_V_0_state_cmp_full <= '0' when (axis_src_V_user_V_0_state = ap_const_lv2_1) else '1';
    axis_src_V_user_V_0_vld_in <= axis_in_TVALID;
    axis_src_V_user_V_0_vld_out <= axis_src_V_user_V_0_state(0);
    brmerge_i_i_i_fu_374_p2 <= (sof_1_i_i_i_fu_144 or ap_phi_mux_eol_i_i_i_phi_fu_250_p4);
    exitcond_i_i_i_fu_347_p2 <= "1" when (yi_i_i_i_reg_213 = ap_const_lv10_200) else "0";

    fifo1_blk_n_assign_proc : process(fifo1_full_n, ap_block_pp1_stage0, ap_enable_reg_pp1_iter3, tmp_72_i_i_i_reg_497_pp1_iter2_reg)
    begin
        if (((tmp_72_i_i_i_reg_497_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            fifo1_blk_n <= fifo1_full_n;
        else 
            fifo1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo1_din <= 
        ap_const_lv8_FF when (tmp_reg_530(0) = '1') else 
        tmp_77_i_i_i_reg_535;

    fifo1_write_assign_proc : process(ap_enable_reg_pp1_iter3, tmp_72_i_i_i_reg_497_pp1_iter2_reg, ap_block_pp1_stage0_11001)
    begin
        if (((tmp_72_i_i_i_reg_497_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            fifo1_write <= ap_const_logic_1;
        else 
            fifo1_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_450_p0 <= ap_const_lv25_9645(17 - 1 downto 0);
    grp_fu_450_p1 <= grp_fu_450_p10(8 - 1 downto 0);
    grp_fu_450_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_1_cast_i_i_i_reg_515_pp1_iter1_reg),25));
    grp_fu_450_p2 <= grp_fu_450_p20(23 - 1 downto 0);
    grp_fu_450_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_460_p3),25));
    grp_fu_460_p0 <= ap_const_lv23_4C8B(16 - 1 downto 0);
    grp_fu_460_p1 <= grp_fu_460_p10(8 - 1 downto 0);
    grp_fu_460_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_i_reg_520_pp1_iter1_reg),23));

    hist_hthr_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, hist_hthr_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            hist_hthr_blk_n <= hist_hthr_empty_n;
        else 
            hist_hthr_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    hist_hthr_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, hist_hthr_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            hist_hthr_out_blk_n <= hist_hthr_out_full_n;
        else 
            hist_hthr_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    hist_hthr_out_din <= hist_hthr_dout;

    hist_hthr_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, hist_hthr_empty_n, hist_lthr_empty_n, hist_hthr_out_full_n, hist_lthr_out_full_n)
    begin
        if ((not(((hist_lthr_out_full_n = ap_const_logic_0) or (hist_hthr_out_full_n = ap_const_logic_0) or (hist_lthr_empty_n = ap_const_logic_0) or (hist_hthr_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            hist_hthr_out_write <= ap_const_logic_1;
        else 
            hist_hthr_out_write <= ap_const_logic_0;
        end if; 
    end process;


    hist_hthr_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, hist_hthr_empty_n, hist_lthr_empty_n, hist_hthr_out_full_n, hist_lthr_out_full_n)
    begin
        if ((not(((hist_lthr_out_full_n = ap_const_logic_0) or (hist_hthr_out_full_n = ap_const_logic_0) or (hist_lthr_empty_n = ap_const_logic_0) or (hist_hthr_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            hist_hthr_read <= ap_const_logic_1;
        else 
            hist_hthr_read <= ap_const_logic_0;
        end if; 
    end process;


    hist_lthr_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, hist_lthr_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            hist_lthr_blk_n <= hist_lthr_empty_n;
        else 
            hist_lthr_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    hist_lthr_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, hist_lthr_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            hist_lthr_out_blk_n <= hist_lthr_out_full_n;
        else 
            hist_lthr_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    hist_lthr_out_din <= hist_lthr_dout;

    hist_lthr_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, hist_hthr_empty_n, hist_lthr_empty_n, hist_hthr_out_full_n, hist_lthr_out_full_n)
    begin
        if ((not(((hist_lthr_out_full_n = ap_const_logic_0) or (hist_hthr_out_full_n = ap_const_logic_0) or (hist_lthr_empty_n = ap_const_logic_0) or (hist_hthr_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            hist_lthr_out_write <= ap_const_logic_1;
        else 
            hist_lthr_out_write <= ap_const_logic_0;
        end if; 
    end process;


    hist_lthr_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, hist_hthr_empty_n, hist_lthr_empty_n, hist_hthr_out_full_n, hist_lthr_out_full_n)
    begin
        if ((not(((hist_lthr_out_full_n = ap_const_logic_0) or (hist_hthr_out_full_n = ap_const_logic_0) or (hist_lthr_empty_n = ap_const_logic_0) or (hist_hthr_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            hist_lthr_read <= ap_const_logic_1;
        else 
            hist_lthr_read <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(exitcond_i_i_i_fu_347_p2, ap_CS_fsm_state4)
    begin
        if (((exitcond_i_i_i_fu_347_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    p_i_i_i_fu_444_p0 <= ap_const_lv23_24DD(15 - 1 downto 0);
    p_i_i_i_fu_444_p1 <= p_i_i_i_fu_444_p10(8 - 1 downto 0);
    p_i_i_i_fu_444_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_reg_510),23));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    ret_V_fu_380_p1 <= ap_phi_mux_axis_reader_data_V_2_phi_fu_286_p4(8 - 1 downto 0);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_72_i_i_i_fu_359_p2 <= "1" when (xi_i_i_i_reg_258 = ap_const_lv10_200) else "0";
    tmp_user_V_fu_338_p1 <= axis_src_V_user_V_0_data_out;
    xi_fu_365_p2 <= std_logic_vector(unsigned(xi_i_i_i_reg_258) + unsigned(ap_const_lv10_1));
    yi_fu_353_p2 <= std_logic_vector(unsigned(yi_i_i_i_reg_213) + unsigned(ap_const_lv10_1));
end behav;
