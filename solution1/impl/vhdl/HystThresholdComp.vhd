-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity HystThresholdComp is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    fifo6_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    fifo6_empty_n : IN STD_LOGIC;
    fifo6_read : OUT STD_LOGIC;
    fifo7_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    fifo7_full_n : IN STD_LOGIC;
    fifo7_write : OUT STD_LOGIC );
end;


architecture behav of HystThresholdComp is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal fifo6_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_49_i_reg_454 : STD_LOGIC_VECTOR (0 downto 0);
    signal fifo7_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal tmp_49_i_reg_454_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xi_i_reg_152 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_i_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal yi_fu_169_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal yi_reg_449 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_49_i_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal xi_fu_181_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal line_buf_addr_reg_463 : STD_LOGIC_VECTOR (8 downto 0);
    signal not_tmp_53_i_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_53_i_reg_469 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_78_2_i_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_78_2_i_reg_474 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_78_2_1_i_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_78_2_1_i_reg_479 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_78_2_2_i_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_78_2_2_i_reg_484 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_reg_489 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter1_state4 : STD_LOGIC;
    signal line_buf_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal line_buf_ce0 : STD_LOGIC;
    signal line_buf_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal line_buf_ce1 : STD_LOGIC;
    signal line_buf_we1 : STD_LOGIC;
    signal line_buf_d1 : STD_LOGIC_VECTOR (23 downto 0);
    signal yi_i_reg_141 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_50_i_fu_187_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal window_buf_0_1_fu_84 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_0_1_3_fu_88 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_0_2_fu_210_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_1_1_fu_92 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_1_1_3_fu_96 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_1_2_fu_220_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_2_1_fu_100 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_2_1_3_fu_104 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_i_fu_230_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_78_0_i_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_78_0_1_i_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_78_0_2_i_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_78_1_i_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pix_hyst_3_0_2_i3_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_78_1_2_i_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_78_1_1_i_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_pix_hyst_1_1_2_i_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pix_hyst_3_1_i_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_pix_hyst_1_2_1_i9_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp7_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pix_hyst_3_2_2_i_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component Sobel_512u_512u_sfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (23 downto 0) );
    end component;



begin
    line_buf_U : component Sobel_512u_512u_sfYi
    generic map (
        DataWidth => 24,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buf_address0,
        ce0 => line_buf_ce0,
        q0 => line_buf_q0,
        address1 => line_buf_addr_reg_463,
        ce1 => line_buf_ce1,
        we1 => line_buf_we1,
        d1 => line_buf_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((tmp_i_fu_163_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((tmp_49_i_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((tmp_i_fu_163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((((tmp_i_fu_163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((tmp_i_fu_163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    xi_i_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                xi_i_reg_152 <= ap_const_lv10_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_49_i_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                xi_i_reg_152 <= xi_fu_181_p2;
            end if; 
        end if;
    end process;

    yi_i_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                yi_i_reg_141 <= yi_reg_449;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                yi_i_reg_141 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_49_i_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                line_buf_addr_reg_463 <= tmp_50_i_fu_187_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_49_i_reg_454 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                not_tmp_53_i_reg_469 <= not_tmp_53_i_fu_255_p2;
                tmp5_reg_489 <= tmp5_fu_345_p2;
                tmp_78_2_1_i_reg_479 <= tmp_78_2_1_i_fu_327_p2;
                tmp_78_2_2_i_reg_484 <= tmp_78_2_2_i_fu_333_p2;
                tmp_78_2_i_reg_474 <= tmp_78_2_i_fu_321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_49_i_reg_454 <= tmp_49_i_fu_175_p2;
                tmp_49_i_reg_454_pp0_iter1_reg <= tmp_49_i_reg_454;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_49_i_reg_454 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                window_buf_0_1_3_fu_88 <= line_buf_q0(15 downto 8);
                window_buf_0_1_fu_84 <= window_buf_0_1_3_fu_88;
                window_buf_1_1_3_fu_96 <= line_buf_q0(23 downto 16);
                window_buf_1_1_fu_92 <= window_buf_1_1_3_fu_96;
                window_buf_2_1_3_fu_104 <= fifo6_dout;
                window_buf_2_1_fu_100 <= window_buf_2_1_3_fu_104;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                yi_reg_449 <= yi_fu_169_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_i_fu_163_p2, ap_CS_fsm_state2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_i_fu_163_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(fifo6_empty_n, fifo7_full_n, ap_enable_reg_pp0_iter1, tmp_49_i_reg_454, ap_enable_reg_pp0_iter2, tmp_49_i_reg_454_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((tmp_49_i_reg_454_pp0_iter1_reg = ap_const_lv1_0) and (fifo7_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((tmp_49_i_reg_454 = ap_const_lv1_0) and (fifo6_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(fifo6_empty_n, fifo7_full_n, ap_enable_reg_pp0_iter1, tmp_49_i_reg_454, ap_enable_reg_pp0_iter2, tmp_49_i_reg_454_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((tmp_49_i_reg_454_pp0_iter1_reg = ap_const_lv1_0) and (fifo7_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((tmp_49_i_reg_454 = ap_const_lv1_0) and (fifo6_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(fifo6_empty_n, fifo7_full_n, ap_enable_reg_pp0_iter1, tmp_49_i_reg_454, ap_enable_reg_pp0_iter2, tmp_49_i_reg_454_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((tmp_49_i_reg_454_pp0_iter1_reg = ap_const_lv1_0) and (fifo7_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((tmp_49_i_reg_454 = ap_const_lv1_0) and (fifo6_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(fifo6_empty_n, tmp_49_i_reg_454)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((tmp_49_i_reg_454 = ap_const_lv1_0) and (fifo6_empty_n = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage0_iter2_assign_proc : process(fifo7_full_n, tmp_49_i_reg_454_pp0_iter1_reg)
    begin
                ap_block_state5_pp0_stage0_iter2 <= ((tmp_49_i_reg_454_pp0_iter1_reg = ap_const_lv1_0) and (fifo7_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter1_state4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter1_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, tmp_i_fu_163_p2, ap_CS_fsm_state2)
    begin
        if (((tmp_i_fu_163_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    fifo6_blk_n_assign_proc : process(fifo6_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_49_i_reg_454)
    begin
        if (((tmp_49_i_reg_454 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo6_blk_n <= fifo6_empty_n;
        else 
            fifo6_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo6_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_49_i_reg_454, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_49_i_reg_454 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo6_read <= ap_const_logic_1;
        else 
            fifo6_read <= ap_const_logic_0;
        end if; 
    end process;


    fifo7_blk_n_assign_proc : process(fifo7_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, tmp_49_i_reg_454_pp0_iter1_reg)
    begin
        if (((tmp_49_i_reg_454_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            fifo7_blk_n <= fifo7_full_n;
        else 
            fifo7_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo7_din <= 
        ap_const_lv8_FF when (pix_hyst_3_2_2_i_fu_395_p2(0) = '1') else 
        ap_const_lv8_0;

    fifo7_write_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_49_i_reg_454_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_49_i_reg_454_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            fifo7_write <= ap_const_logic_1;
        else 
            fifo7_write <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(tmp_i_fu_163_p2, ap_CS_fsm_state2)
    begin
        if (((tmp_i_fu_163_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    line_buf_address0 <= tmp_50_i_fu_187_p1(9 - 1 downto 0);

    line_buf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            line_buf_ce0 <= ap_const_logic_1;
        else 
            line_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buf_ce1 <= ap_const_logic_1;
        else 
            line_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    line_buf_d1 <= (fifo6_dout & tmp_26_i_fu_230_p4);

    line_buf_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_49_i_reg_454, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_49_i_reg_454 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buf_we1 <= ap_const_logic_1;
        else 
            line_buf_we1 <= ap_const_logic_0;
        end if; 
    end process;

    not_tmp_53_i_fu_255_p2 <= "0" when (window_buf_1_1_3_fu_96 = ap_const_lv8_0) else "1";
    p_pix_hyst_1_1_2_i_fu_315_p2 <= (tmp_78_1_2_i_fu_309_p2 and not_tmp_53_i_fu_255_p2);
    p_pix_hyst_1_2_1_i9_fu_381_p2 <= (tmp_78_2_2_i_reg_484 or tmp_78_2_1_i_reg_479);
    pix_hyst_3_0_2_i3_fu_291_p2 <= (tmp_fu_279_p2 or tmp4_fu_285_p2);
    pix_hyst_3_1_i_fu_297_p2 <= (pix_hyst_3_0_2_i3_fu_291_p2 and not_tmp_53_i_fu_255_p2);
    pix_hyst_3_2_2_i_fu_395_p2 <= (tmp7_fu_390_p2 or tmp5_reg_489);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp2_fu_385_p2 <= (tmp_78_2_i_reg_474 or p_pix_hyst_1_2_1_i9_fu_381_p2);
    tmp4_fu_285_p2 <= (tmp_78_1_i_fu_273_p2 or tmp_78_0_2_i_fu_267_p2);
    tmp5_fu_345_p2 <= (tmp6_fu_339_p2 or pix_hyst_3_1_i_fu_297_p2);
    tmp6_fu_339_p2 <= (tmp_78_1_1_i_fu_303_p2 or p_pix_hyst_1_1_2_i_fu_315_p2);
    tmp7_fu_390_p2 <= (tmp2_fu_385_p2 and not_tmp_53_i_reg_469);
    tmp_26_i_fu_230_p4 <= line_buf_q0(23 downto 8);
    tmp_49_i_fu_175_p2 <= "1" when (xi_i_reg_152 = ap_const_lv10_200) else "0";
    tmp_50_i_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xi_i_reg_152),64));
    tmp_78_0_1_i_fu_261_p2 <= "1" when (window_buf_0_1_3_fu_88 = ap_const_lv8_FF) else "0";
    tmp_78_0_2_i_fu_267_p2 <= "1" when (window_buf_0_2_fu_210_p4 = ap_const_lv8_FF) else "0";
    tmp_78_0_i_fu_249_p2 <= "1" when (window_buf_0_1_fu_84 = ap_const_lv8_FF) else "0";
    tmp_78_1_1_i_fu_303_p2 <= "1" when (window_buf_1_1_3_fu_96 = ap_const_lv8_FF) else "0";
    tmp_78_1_2_i_fu_309_p2 <= "1" when (window_buf_1_2_fu_220_p4 = ap_const_lv8_FF) else "0";
    tmp_78_1_i_fu_273_p2 <= "1" when (window_buf_1_1_fu_92 = ap_const_lv8_FF) else "0";
    tmp_78_2_1_i_fu_327_p2 <= "1" when (window_buf_2_1_3_fu_104 = ap_const_lv8_FF) else "0";
    tmp_78_2_2_i_fu_333_p2 <= "1" when (fifo6_dout = ap_const_lv8_FF) else "0";
    tmp_78_2_i_fu_321_p2 <= "1" when (window_buf_2_1_fu_100 = ap_const_lv8_FF) else "0";
    tmp_fu_279_p2 <= (tmp_78_0_i_fu_249_p2 or tmp_78_0_1_i_fu_261_p2);
    tmp_i_fu_163_p2 <= "1" when (yi_i_reg_141 = ap_const_lv10_200) else "0";
    window_buf_0_2_fu_210_p4 <= line_buf_q0(15 downto 8);
    window_buf_1_2_fu_220_p4 <= line_buf_q0(23 downto 16);
    xi_fu_181_p2 <= std_logic_vector(unsigned(xi_i_reg_152) + unsigned(ap_const_lv10_1));
    yi_fu_169_p2 <= std_logic_vector(unsigned(yi_i_reg_141) + unsigned(ap_const_lv10_1));
end behav;
